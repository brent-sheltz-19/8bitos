# 1 "../drivers/io/port controller/portcontroller.cpp"
# 1 "C:\\Users\\Brent\\Documents\\GitHub\\8bitos\\code\\os\\os\\Debug//"
# 1 "<built-in>"
# 1 "<command-line>"
# 1 "../drivers/io/port controller/portcontroller.cpp"
# 9 "../drivers/io/port controller/portcontroller.cpp"
# 1 "../drivers/io/port controller/portcontroller.h" 1
# 9 "../drivers/io/port controller/portcontroller.h"
# 1 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\avr\\io.h" 1 3
# 99 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\avr\\io.h" 3
# 1 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\avr\\sfr_defs.h" 1 3
# 126 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\avr\\sfr_defs.h" 3
# 1 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\inttypes.h" 1 3
# 37 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\inttypes.h" 3
# 1 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\lib\\gcc\\avr\\5.4.0\\include\\stdint.h" 1 3 4
# 9 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\lib\\gcc\\avr\\5.4.0\\include\\stdint.h" 3 4
# 1 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\stdint.h" 1 3 4
# 125 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\stdint.h" 3 4

# 125 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\stdint.h" 3 4
typedef signed int int8_t __attribute__((__mode__(__QI__)));
typedef unsigned int uint8_t __attribute__((__mode__(__QI__)));
typedef signed int int16_t __attribute__ ((__mode__ (__HI__)));
typedef unsigned int uint16_t __attribute__ ((__mode__ (__HI__)));
typedef signed int int32_t __attribute__ ((__mode__ (__SI__)));
typedef unsigned int uint32_t __attribute__ ((__mode__ (__SI__)));

typedef signed int int64_t __attribute__((__mode__(__DI__)));
typedef unsigned int uint64_t __attribute__((__mode__(__DI__)));
# 146 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\stdint.h" 3 4
typedef int16_t intptr_t;




typedef uint16_t uintptr_t;
# 163 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\stdint.h" 3 4
typedef int8_t int_least8_t;




typedef uint8_t uint_least8_t;




typedef int16_t int_least16_t;




typedef uint16_t uint_least16_t;




typedef int32_t int_least32_t;




typedef uint32_t uint_least32_t;







typedef int64_t int_least64_t;






typedef uint64_t uint_least64_t;
# 217 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\stdint.h" 3 4
typedef int8_t int_fast8_t;




typedef uint8_t uint_fast8_t;




typedef int16_t int_fast16_t;




typedef uint16_t uint_fast16_t;




typedef int32_t int_fast32_t;




typedef uint32_t uint_fast32_t;







typedef int64_t int_fast64_t;






typedef uint64_t uint_fast64_t;
# 277 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\stdint.h" 3 4
typedef int64_t intmax_t;




typedef uint64_t uintmax_t;
# 10 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\lib\\gcc\\avr\\5.4.0\\include\\stdint.h" 2 3 4
# 38 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\inttypes.h" 2 3
# 77 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\inttypes.h" 3
typedef int32_t int_farptr_t;



typedef uint32_t uint_farptr_t;
# 127 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\avr\\sfr_defs.h" 2 3
# 100 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\avr\\io.h" 2 3
# 212 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\avr\\io.h" 3
# 1 "C:\\Program Files (x86)\\Atmel\\Studio\\7.0\\Packs\\atmel\\ATmega_DFP\\1.3.300\\include/avr/iom644pa.h" 1 3
# 213 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\avr\\io.h" 2 3
# 627 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\avr\\io.h" 3
# 1 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\avr\\portpins.h" 1 3
# 628 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\avr\\io.h" 2 3

# 1 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\avr\\common.h" 1 3
# 630 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\avr\\io.h" 2 3

# 1 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\avr\\version.h" 1 3
# 632 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\avr\\io.h" 2 3






# 1 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\avr\\fuse.h" 1 3
# 239 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\avr\\fuse.h" 3
typedef struct
{
    unsigned char low;
    unsigned char high;
    unsigned char extended;
} __fuse_t;
# 639 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\avr\\io.h" 2 3


# 1 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\avr\\lock.h" 1 3
# 642 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\include\\avr\\io.h" 2 3
# 10 "../drivers/io/port controller/portcontroller.h" 2






# 15 "../drivers/io/port controller/portcontroller.h"
class portcontroller
{

public:
protected:
private:


public:
 portcontroller();
 char readporta();
 char readportb();
 char readportc();
 char readportd();
 char readddra();
 char readddrb();
 char readddrc();
 char readddrd();

 void writeporta(char a);
 void writeportb(char);
 void writeportc(char);
 void writeportd(char);
 void writeddra(char);
 void writeddrb(char);
 void writeddrc(char);
 void writeddrd(char);

 char digitalread(uint8_t pin);
# 52 "../drivers/io/port controller/portcontroller.h"
 void digitalwrite(uint8_t pin, bool on);

 ~portcontroller();
protected:
private:


 void digitalwritea(uint8_t pin, bool on);
 void digitalwriteb(uint8_t pin, bool on);
 void digitalwritec(uint8_t pin, bool on);
 void digitalwrited(uint8_t pin, bool on);

};
# 10 "../drivers/io/port controller/portcontroller.cpp" 2


portcontroller::portcontroller()
{
}

 char portcontroller::readporta()
{
 return 
# 18 "../drivers/io/port controller/portcontroller.cpp" 3
       (*(volatile uint8_t *)((0x00) + 0x20))
# 18 "../drivers/io/port controller/portcontroller.cpp"
           ;
}

 char portcontroller::readportb()
{
 return 
# 23 "../drivers/io/port controller/portcontroller.cpp" 3
       (*(volatile uint8_t *)((0x03) + 0x20))
# 23 "../drivers/io/port controller/portcontroller.cpp"
           ;
}

 char portcontroller::readportc()
{
return 
# 28 "../drivers/io/port controller/portcontroller.cpp" 3
      (*(volatile uint8_t *)((0x06) + 0x20))
# 28 "../drivers/io/port controller/portcontroller.cpp"
          ;
}

 char portcontroller::readportd()
{
 return 
# 33 "../drivers/io/port controller/portcontroller.cpp" 3
       (*(volatile uint8_t *)((0x09) + 0x20))
# 33 "../drivers/io/port controller/portcontroller.cpp"
           ;
}

 char portcontroller::readddra()
{
 return 
# 38 "../drivers/io/port controller/portcontroller.cpp" 3
       (*(volatile uint8_t *)((0x01) + 0x20))
# 38 "../drivers/io/port controller/portcontroller.cpp"
           ;
}

 char portcontroller::readddrb()
{
 return 
# 43 "../drivers/io/port controller/portcontroller.cpp" 3
       (*(volatile uint8_t *)((0x04) + 0x20))
# 43 "../drivers/io/port controller/portcontroller.cpp"
           ;
}

 char portcontroller::readddrc()
{
 return 
# 48 "../drivers/io/port controller/portcontroller.cpp" 3
       (*(volatile uint8_t *)((0x07) + 0x20))
# 48 "../drivers/io/port controller/portcontroller.cpp"
           ;
}

 char portcontroller::readddrd()
{
 return 
# 53 "../drivers/io/port controller/portcontroller.cpp" 3
       (*(volatile uint8_t *)((0x0A) + 0x20))
# 53 "../drivers/io/port controller/portcontroller.cpp"
           ;
}

 void portcontroller::writeporta(char A)
{
 
# 58 "../drivers/io/port controller/portcontroller.cpp" 3
(*(volatile uint8_t *)((0x02) + 0x20)) 
# 58 "../drivers/io/port controller/portcontroller.cpp"
      = A;
}

 void portcontroller::writeportb(char a)
{
 
# 63 "../drivers/io/port controller/portcontroller.cpp" 3
(*(volatile uint8_t *)((0x05) + 0x20)) 
# 63 "../drivers/io/port controller/portcontroller.cpp"
      = a;
}

 void portcontroller::writeportc(char a)
{
 
# 68 "../drivers/io/port controller/portcontroller.cpp" 3
(*(volatile uint8_t *)((0x08) + 0x20)) 
# 68 "../drivers/io/port controller/portcontroller.cpp"
      = a;
}


 void portcontroller::writeportd(char a)
{
 
# 74 "../drivers/io/port controller/portcontroller.cpp" 3
(*(volatile uint8_t *)((0x0B) + 0x20)) 
# 74 "../drivers/io/port controller/portcontroller.cpp"
      = a;
}

 void portcontroller::writeddra(char a)
{
 
# 79 "../drivers/io/port controller/portcontroller.cpp" 3
(*(volatile uint8_t *)((0x01) + 0x20)) 
# 79 "../drivers/io/port controller/portcontroller.cpp"
      = a;
}

 void portcontroller::writeddrb(char a)
{
 
# 84 "../drivers/io/port controller/portcontroller.cpp" 3
(*(volatile uint8_t *)((0x04) + 0x20)) 
# 84 "../drivers/io/port controller/portcontroller.cpp"
     = a;
}

 void portcontroller::writeddrc(char a)
{
 
# 89 "../drivers/io/port controller/portcontroller.cpp" 3
(*(volatile uint8_t *)((0x07) + 0x20)) 
# 89 "../drivers/io/port controller/portcontroller.cpp"
     =a;
}

 void portcontroller::writeddrd(char a)
{
 
# 94 "../drivers/io/port controller/portcontroller.cpp" 3
(*(volatile uint8_t *)((0x0A) + 0x20)) 
# 94 "../drivers/io/port controller/portcontroller.cpp"
     = a;
}

void portcontroller::digitalwrite(uint8_t pin, bool on)
{
 if (pin>0&&pin<=8)
 {
 digitalwritea(pin-1,on);
 }
 else if (pin>13&&pin<=21)
 {
 digitalwritea(pin-13,on);
 }
 else if (pin>21&&pin<=29)
 {
 digitalwritea(pin-21,on);
 }
 else if (pin>32&&pin<=40)
 {
 digitalwritea(pin-32,on);
 }

}

void portcontroller::digitalwritea(uint8_t pin, bool on)
{
 if(pin==1)
 {
  if (on)
  {
   
# 124 "../drivers/io/port controller/portcontroller.cpp" 3
  (*(volatile uint8_t *)((0x02) + 0x20))
# 124 "../drivers/io/port controller/portcontroller.cpp"
       |=0b00000001;
  }
  else
  {
   
# 128 "../drivers/io/port controller/portcontroller.cpp" 3
  (*(volatile uint8_t *)((0x02) + 0x20))
# 128 "../drivers/io/port controller/portcontroller.cpp"
       &=0b11111110;
  }

 }
 else if (pin==2)
 {
  if (on)
  {
   
# 136 "../drivers/io/port controller/portcontroller.cpp" 3
  (*(volatile uint8_t *)((0x02) + 0x20))
# 136 "../drivers/io/port controller/portcontroller.cpp"
       |=0b00000010;
  }
  else
  {
   
# 140 "../drivers/io/port controller/portcontroller.cpp" 3
  (*(volatile uint8_t *)((0x02) + 0x20))
# 140 "../drivers/io/port controller/portcontroller.cpp"
       &=0b11111101;
  }
 }
 else if (pin==3)
 {
  if (on)
  {
   
# 147 "../drivers/io/port controller/portcontroller.cpp" 3
  (*(volatile uint8_t *)((0x02) + 0x20))
# 147 "../drivers/io/port controller/portcontroller.cpp"
       |=0b00000100;
  }
  else
  {
   
# 151 "../drivers/io/port controller/portcontroller.cpp" 3
  (*(volatile uint8_t *)((0x02) + 0x20))
# 151 "../drivers/io/port controller/portcontroller.cpp"
       &=0b11111011;
  }
 }
 else if (pin==4)
 {
  if (on)
  {
   
# 158 "../drivers/io/port controller/portcontroller.cpp" 3
  (*(volatile uint8_t *)((0x02) + 0x20))
# 158 "../drivers/io/port controller/portcontroller.cpp"
       |=0b00001000;
  }
  else
  {
   
# 162 "../drivers/io/port controller/portcontroller.cpp" 3
  (*(volatile uint8_t *)((0x02) + 0x20))
# 162 "../drivers/io/port controller/portcontroller.cpp"
       &=0b11110111;
  }
 }
 else if (pin==5)
 {
  if (on)
  {
   
# 169 "../drivers/io/port controller/portcontroller.cpp" 3
  (*(volatile uint8_t *)((0x02) + 0x20))
# 169 "../drivers/io/port controller/portcontroller.cpp"
       |=0b00010000;
  }
  else
  {
   
# 173 "../drivers/io/port controller/portcontroller.cpp" 3
  (*(volatile uint8_t *)((0x02) + 0x20))
# 173 "../drivers/io/port controller/portcontroller.cpp"
       &=0b11101111;
  }
 }
 else if (pin==6)
 {
  if (on)
  {
   
# 180 "../drivers/io/port controller/portcontroller.cpp" 3
  (*(volatile uint8_t *)((0x02) + 0x20))
# 180 "../drivers/io/port controller/portcontroller.cpp"
       |=0b00100000;
  }
  else
  {
   
# 184 "../drivers/io/port controller/portcontroller.cpp" 3
  (*(volatile uint8_t *)((0x02) + 0x20))
# 184 "../drivers/io/port controller/portcontroller.cpp"
       &=0b11011111;
  }
 }
 else if (pin==7)
 {
  if (on)
  {
   
# 191 "../drivers/io/port controller/portcontroller.cpp" 3
  (*(volatile uint8_t *)((0x02) + 0x20))
# 191 "../drivers/io/port controller/portcontroller.cpp"
       |=0b01000000;
  }
  else
  {
   
# 195 "../drivers/io/port controller/portcontroller.cpp" 3
  (*(volatile uint8_t *)((0x02) + 0x20))
# 195 "../drivers/io/port controller/portcontroller.cpp"
       &=0b10111111;
  }
 }
 else if (pin==8)
 {
  if (on)
  {
   
# 202 "../drivers/io/port controller/portcontroller.cpp" 3
  (*(volatile uint8_t *)((0x02) + 0x20))
# 202 "../drivers/io/port controller/portcontroller.cpp"
       |=0b10000000;
  }
  else
  {
   
# 206 "../drivers/io/port controller/portcontroller.cpp" 3
  (*(volatile uint8_t *)((0x02) + 0x20))
# 206 "../drivers/io/port controller/portcontroller.cpp"
       &=0b01111111;
  }
 }
}

void portcontroller::digitalwriteb(uint8_t pin, bool on)
{
 if(pin==1)
 {
  if (on)
  {
   
# 217 "../drivers/io/port controller/portcontroller.cpp" 3
  (*(volatile uint8_t *)((0x05) + 0x20))
# 217 "../drivers/io/port controller/portcontroller.cpp"
       |=0b00000001;
  }
  else
  {
   
# 221 "../drivers/io/port controller/portcontroller.cpp" 3
  (*(volatile uint8_t *)((0x05) + 0x20))
# 221 "../drivers/io/port controller/portcontroller.cpp"
       &=0b11111110;
  }

 }
 else if (pin==2)
 {
  if (on)
  {
   
# 229 "../drivers/io/port controller/portcontroller.cpp" 3
  (*(volatile uint8_t *)((0x05) + 0x20))
# 229 "../drivers/io/port controller/portcontroller.cpp"
       |=0b00000010;
  }
  else
  {
   
# 233 "../drivers/io/port controller/portcontroller.cpp" 3
  (*(volatile uint8_t *)((0x05) + 0x20))
# 233 "../drivers/io/port controller/portcontroller.cpp"
       &=0b11111101;
  }
 }
 else if (pin==3)
 {
  if (on)
  {
   
# 240 "../drivers/io/port controller/portcontroller.cpp" 3
  (*(volatile uint8_t *)((0x05) + 0x20))
# 240 "../drivers/io/port controller/portcontroller.cpp"
       |=0b00000100;
  }
  else
  {
   
# 244 "../drivers/io/port controller/portcontroller.cpp" 3
  (*(volatile uint8_t *)((0x05) + 0x20))
# 244 "../drivers/io/port controller/portcontroller.cpp"
       &=0b11111011;
  }
 }
 else if (pin==4)
 {
  if (on)
  {
   
# 251 "../drivers/io/port controller/portcontroller.cpp" 3
  (*(volatile uint8_t *)((0x05) + 0x20))
# 251 "../drivers/io/port controller/portcontroller.cpp"
       |=0b00001000;
  }
  else
  {
   
# 255 "../drivers/io/port controller/portcontroller.cpp" 3
  (*(volatile uint8_t *)((0x05) + 0x20))
# 255 "../drivers/io/port controller/portcontroller.cpp"
       &=0b11110111;
  }
 }
 else if (pin==5)
 {
  if (on)
  {
   
# 262 "../drivers/io/port controller/portcontroller.cpp" 3
  (*(volatile uint8_t *)((0x05) + 0x20))
# 262 "../drivers/io/port controller/portcontroller.cpp"
       |=0b00010000;
  }
  else
  {
   
# 266 "../drivers/io/port controller/portcontroller.cpp" 3
  (*(volatile uint8_t *)((0x05) + 0x20))
# 266 "../drivers/io/port controller/portcontroller.cpp"
       &=0b11101111;
  }
 }
 else if (pin==6)
 {
  if (on)
  {
   
# 273 "../drivers/io/port controller/portcontroller.cpp" 3
  (*(volatile uint8_t *)((0x05) + 0x20))
# 273 "../drivers/io/port controller/portcontroller.cpp"
       |=0b00100000;
  }
  else
  {
   
# 277 "../drivers/io/port controller/portcontroller.cpp" 3
  (*(volatile uint8_t *)((0x05) + 0x20))
# 277 "../drivers/io/port controller/portcontroller.cpp"
       &=0b11011111;
  }
 }
 else if (pin==7)
 {
  if (on)
  {
   
# 284 "../drivers/io/port controller/portcontroller.cpp" 3
  (*(volatile uint8_t *)((0x05) + 0x20))
# 284 "../drivers/io/port controller/portcontroller.cpp"
       |=0b01000000;
  }
  else
  {
   
# 288 "../drivers/io/port controller/portcontroller.cpp" 3
  (*(volatile uint8_t *)((0x05) + 0x20))
# 288 "../drivers/io/port controller/portcontroller.cpp"
       &=0b10111111;
  }
 }
 else if (pin==8)
 {
  if (on)
  {
   
# 295 "../drivers/io/port controller/portcontroller.cpp" 3
  (*(volatile uint8_t *)((0x05) + 0x20))
# 295 "../drivers/io/port controller/portcontroller.cpp"
       |=0b10000000;
  }
  else
  {
   
# 299 "../drivers/io/port controller/portcontroller.cpp" 3
  (*(volatile uint8_t *)((0x05) + 0x20))
# 299 "../drivers/io/port controller/portcontroller.cpp"
       &=0b01111111;
  }
 }
}

void portcontroller::digitalwritec(uint8_t pin, bool on)
{
 if(pin==1)
 {
  if (on)
  {
   
# 310 "../drivers/io/port controller/portcontroller.cpp" 3
  (*(volatile uint8_t *)((0x08) + 0x20))
# 310 "../drivers/io/port controller/portcontroller.cpp"
       |=0b00000001;
  }
  else
  {
   
# 314 "../drivers/io/port controller/portcontroller.cpp" 3
  (*(volatile uint8_t *)((0x08) + 0x20))
# 314 "../drivers/io/port controller/portcontroller.cpp"
       &=0b11111110;
  }

 }
 else if (pin==2)
 {
  if (on)
  {
   
# 322 "../drivers/io/port controller/portcontroller.cpp" 3
  (*(volatile uint8_t *)((0x08) + 0x20))
# 322 "../drivers/io/port controller/portcontroller.cpp"
       |=0b00000010;
  }
  else
  {
   
# 326 "../drivers/io/port controller/portcontroller.cpp" 3
  (*(volatile uint8_t *)((0x08) + 0x20))
# 326 "../drivers/io/port controller/portcontroller.cpp"
       &=0b11111101;
  }
 }
 else if (pin==3)
 {
  if (on)
  {
   
# 333 "../drivers/io/port controller/portcontroller.cpp" 3
  (*(volatile uint8_t *)((0x08) + 0x20))
# 333 "../drivers/io/port controller/portcontroller.cpp"
       |=0b00000100;
  }
  else
  {
   
# 337 "../drivers/io/port controller/portcontroller.cpp" 3
  (*(volatile uint8_t *)((0x08) + 0x20))
# 337 "../drivers/io/port controller/portcontroller.cpp"
       &=0b11111011;
  }
 }
 else if (pin==4)
 {
  if (on)
  {
   
# 344 "../drivers/io/port controller/portcontroller.cpp" 3
  (*(volatile uint8_t *)((0x08) + 0x20))
# 344 "../drivers/io/port controller/portcontroller.cpp"
       |=0b00001000;
  }
  else
  {
   
# 348 "../drivers/io/port controller/portcontroller.cpp" 3
  (*(volatile uint8_t *)((0x08) + 0x20))
# 348 "../drivers/io/port controller/portcontroller.cpp"
       &=0b11110111;
  }
 }
 else if (pin==5)
 {
  if (on)
  {
   
# 355 "../drivers/io/port controller/portcontroller.cpp" 3
  (*(volatile uint8_t *)((0x08) + 0x20))
# 355 "../drivers/io/port controller/portcontroller.cpp"
       |=0b00010000;
  }
  else
  {
   
# 359 "../drivers/io/port controller/portcontroller.cpp" 3
  (*(volatile uint8_t *)((0x08) + 0x20))
# 359 "../drivers/io/port controller/portcontroller.cpp"
       &=0b11101111;
  }
 }
 else if (pin==6)
 {
  if (on)
  {
   
# 366 "../drivers/io/port controller/portcontroller.cpp" 3
  (*(volatile uint8_t *)((0x08) + 0x20))
# 366 "../drivers/io/port controller/portcontroller.cpp"
       |=0b00100000;
  }
  else
  {
   
# 370 "../drivers/io/port controller/portcontroller.cpp" 3
  (*(volatile uint8_t *)((0x08) + 0x20))
# 370 "../drivers/io/port controller/portcontroller.cpp"
       &=0b11011111;
  }
 }
 else if (pin==7)
 {
  if (on)
  {
   
# 377 "../drivers/io/port controller/portcontroller.cpp" 3
  (*(volatile uint8_t *)((0x08) + 0x20))
# 377 "../drivers/io/port controller/portcontroller.cpp"
       |=0b01000000;
  }
  else
  {
   
# 381 "../drivers/io/port controller/portcontroller.cpp" 3
  (*(volatile uint8_t *)((0x08) + 0x20))
# 381 "../drivers/io/port controller/portcontroller.cpp"
       &=0b10111111;
  }
 }
 else if (pin==8)
 {
  if (on)
  {
   
# 388 "../drivers/io/port controller/portcontroller.cpp" 3
  (*(volatile uint8_t *)((0x08) + 0x20))
# 388 "../drivers/io/port controller/portcontroller.cpp"
       |=0b10000000;
  }
  else
  {
   
# 392 "../drivers/io/port controller/portcontroller.cpp" 3
  (*(volatile uint8_t *)((0x08) + 0x20))
# 392 "../drivers/io/port controller/portcontroller.cpp"
       &=0b01111111;
  }
 }
}

void portcontroller::digitalwrited(uint8_t pin, bool on)
{
 if(pin==1)
 {
  if (on)
  {
   
# 403 "../drivers/io/port controller/portcontroller.cpp" 3
  (*(volatile uint8_t *)((0x0B) + 0x20))
# 403 "../drivers/io/port controller/portcontroller.cpp"
       |=0b00000001;
  }
  else
  {
   
# 407 "../drivers/io/port controller/portcontroller.cpp" 3
  (*(volatile uint8_t *)((0x0B) + 0x20))
# 407 "../drivers/io/port controller/portcontroller.cpp"
       &=0b11111110;
  }

 }
 else if (pin==2)
 {
  if (on)
  {
   
# 415 "../drivers/io/port controller/portcontroller.cpp" 3
  (*(volatile uint8_t *)((0x0B) + 0x20))
# 415 "../drivers/io/port controller/portcontroller.cpp"
       |=0b00000010;
  }
  else
  {
   
# 419 "../drivers/io/port controller/portcontroller.cpp" 3
  (*(volatile uint8_t *)((0x0B) + 0x20))
# 419 "../drivers/io/port controller/portcontroller.cpp"
       &=0b11111101;
  }
 }
 else if (pin==3)
 {
  if (on)
  {
   
# 426 "../drivers/io/port controller/portcontroller.cpp" 3
  (*(volatile uint8_t *)((0x0B) + 0x20))
# 426 "../drivers/io/port controller/portcontroller.cpp"
       |=0b00000100;
  }
  else
  {
   
# 430 "../drivers/io/port controller/portcontroller.cpp" 3
  (*(volatile uint8_t *)((0x0B) + 0x20))
# 430 "../drivers/io/port controller/portcontroller.cpp"
       &=0b11111011;
  }
 }
 else if (pin==4)
 {
  if (on)
  {
   
# 437 "../drivers/io/port controller/portcontroller.cpp" 3
  (*(volatile uint8_t *)((0x0B) + 0x20))
# 437 "../drivers/io/port controller/portcontroller.cpp"
       |=0b00001000;
  }
  else
  {
   
# 441 "../drivers/io/port controller/portcontroller.cpp" 3
  (*(volatile uint8_t *)((0x0B) + 0x20))
# 441 "../drivers/io/port controller/portcontroller.cpp"
       &=0b11110111;
  }
 }
 else if (pin==5)
 {
  if (on)
  {
   
# 448 "../drivers/io/port controller/portcontroller.cpp" 3
  (*(volatile uint8_t *)((0x0B) + 0x20))
# 448 "../drivers/io/port controller/portcontroller.cpp"
       |=0b00010000;
  }
  else
  {
   
# 452 "../drivers/io/port controller/portcontroller.cpp" 3
  (*(volatile uint8_t *)((0x0B) + 0x20))
# 452 "../drivers/io/port controller/portcontroller.cpp"
       &=0b11101111;
  }
 }
 else if (pin==6)
 {
  if (on)
  {
   
# 459 "../drivers/io/port controller/portcontroller.cpp" 3
  (*(volatile uint8_t *)((0x0B) + 0x20))
# 459 "../drivers/io/port controller/portcontroller.cpp"
       |=0b00100000;
  }
  else
  {
   
# 463 "../drivers/io/port controller/portcontroller.cpp" 3
  (*(volatile uint8_t *)((0x0B) + 0x20))
# 463 "../drivers/io/port controller/portcontroller.cpp"
       &=0b11011111;
  }
 }
 else if (pin==7)
 {
  if (on)
  {
   
# 470 "../drivers/io/port controller/portcontroller.cpp" 3
  (*(volatile uint8_t *)((0x0B) + 0x20))
# 470 "../drivers/io/port controller/portcontroller.cpp"
       |=0b01000000;
  }
  else
  {
   
# 474 "../drivers/io/port controller/portcontroller.cpp" 3
  (*(volatile uint8_t *)((0x0B) + 0x20))
# 474 "../drivers/io/port controller/portcontroller.cpp"
       &=0b10111111;
  }
 }
 else if (pin==8)
 {
  if (on)
  {
   
# 481 "../drivers/io/port controller/portcontroller.cpp" 3
  (*(volatile uint8_t *)((0x0B) + 0x20))
# 481 "../drivers/io/port controller/portcontroller.cpp"
       |=0b10000000;
  }
  else
  {
   
# 485 "../drivers/io/port controller/portcontroller.cpp" 3
  (*(volatile uint8_t *)((0x0B) + 0x20))
# 485 "../drivers/io/port controller/portcontroller.cpp"
       &=0b01111111;
  }
 }

}


portcontroller::~portcontroller()
{
}
