
os.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000a9a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a26  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000013c  00800100  00800100  00000a9a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000a9a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000acc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002b8  00000000  00000000  00000b0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000625d  00000000  00000000  00000dc4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000017c9  00000000  00000000  00007021  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001674  00000000  00000000  000087ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000700  00000000  00000000  00009e60  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000012cd  00000000  00000000  0000a560  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000160e  00000000  00000000  0000b82d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000228  00000000  00000000  0000ce3b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 40 00 	jmp	0x80	; 0x80 <__dtors_end>
   4:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   8:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  10:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  14:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  18:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  1c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  20:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  24:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  28:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  2c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  30:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  34:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  38:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  3c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  40:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  44:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  48:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  4c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  50:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  54:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  58:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  5c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  60:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  64:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  68:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  6c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  70:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  74:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  78:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>

0000007c <__ctors_start>:
  7c:	4a 03       	fmul	r20, r18

0000007e <__ctors_end>:
  7e:	81 04       	cpc	r8, r1

00000080 <__dtors_end>:
  80:	11 24       	eor	r1, r1
  82:	1f be       	out	0x3f, r1	; 63
  84:	cf ef       	ldi	r28, 0xFF	; 255
  86:	d0 e1       	ldi	r29, 0x10	; 16
  88:	de bf       	out	0x3e, r29	; 62
  8a:	cd bf       	out	0x3d, r28	; 61

0000008c <__do_clear_bss>:
  8c:	22 e0       	ldi	r18, 0x02	; 2
  8e:	a0 e0       	ldi	r26, 0x00	; 0
  90:	b1 e0       	ldi	r27, 0x01	; 1
  92:	01 c0       	rjmp	.+2      	; 0x96 <.do_clear_bss_start>

00000094 <.do_clear_bss_loop>:
  94:	1d 92       	st	X+, r1

00000096 <.do_clear_bss_start>:
  96:	ac 33       	cpi	r26, 0x3C	; 60
  98:	b2 07       	cpc	r27, r18
  9a:	e1 f7       	brne	.-8      	; 0x94 <.do_clear_bss_loop>

0000009c <__do_global_ctors>:
  9c:	10 e0       	ldi	r17, 0x00	; 0
  9e:	cf e3       	ldi	r28, 0x3F	; 63
  a0:	d0 e0       	ldi	r29, 0x00	; 0
  a2:	04 c0       	rjmp	.+8      	; 0xac <__do_global_ctors+0x10>
  a4:	21 97       	sbiw	r28, 0x01	; 1
  a6:	fe 01       	movw	r30, r28
  a8:	0e 94 00 05 	call	0xa00	; 0xa00 <__tablejump2__>
  ac:	ce 33       	cpi	r28, 0x3E	; 62
  ae:	d1 07       	cpc	r29, r17
  b0:	c9 f7       	brne	.-14     	; 0xa4 <__do_global_ctors+0x8>
  b2:	0e 94 31 03 	call	0x662	; 0x662 <main>
  b6:	0c 94 06 05 	jmp	0xa0c	; 0xa0c <__do_global_dtors>

000000ba <__bad_interrupt>:
  ba:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000be <_ZN10interruptsC1Ev>:
interrupts::interrupts()
{
} //interrupts

void interrupts::handleinterrupt()
{
  be:	08 95       	ret

000000c0 <_ZN10interruptsD1Ev>:
	{
	}
}

// default destructor
interrupts::~interrupts()
  c0:	08 95       	ret

000000c2 <_ZN3lcdC1Ev>:
lcd::lcd()
{
	//instructions ins = instructions();
} //lcd

 lcd::lcd(portcontroller* port)
  c2:	08 95       	ret

000000c4 <_ZN3lcdD1Ev>:
 {
	
 }

// default destructor
lcd::~lcd()
  c4:	08 95       	ret

000000c6 <_ZN14portcontrollerC1Ev>:
		{
			PORTD|=0b10000000;
		}
		else
		{
			PORTD&=0b01111111;
  c6:	08 95       	ret

000000c8 <_ZN14portcontroller10writeportcEc>:
  c8:	68 b9       	out	0x08, r22	; 8
  ca:	08 95       	ret

000000cc <_ZN14portcontroller9writeddraEc>:
  cc:	61 b9       	out	0x01, r22	; 1
  ce:	08 95       	ret

000000d0 <_ZN14portcontroller9writeddrcEc>:
  d0:	67 b9       	out	0x07, r22	; 7
  d2:	08 95       	ret

000000d4 <_ZN14portcontroller13digitalwriteaEhb>:
  d4:	61 30       	cpi	r22, 0x01	; 1
  d6:	31 f4       	brne	.+12     	; 0xe4 <_ZN14portcontroller13digitalwriteaEhb+0x10>
  d8:	44 23       	and	r20, r20
  da:	11 f0       	breq	.+4      	; 0xe0 <_ZN14portcontroller13digitalwriteaEhb+0xc>
  dc:	10 9a       	sbi	0x02, 0	; 2
  de:	08 95       	ret
  e0:	10 98       	cbi	0x02, 0	; 2
  e2:	08 95       	ret
  e4:	62 30       	cpi	r22, 0x02	; 2
  e6:	31 f4       	brne	.+12     	; 0xf4 <_ZN14portcontroller13digitalwriteaEhb+0x20>
  e8:	44 23       	and	r20, r20
  ea:	11 f0       	breq	.+4      	; 0xf0 <_ZN14portcontroller13digitalwriteaEhb+0x1c>
  ec:	11 9a       	sbi	0x02, 1	; 2
  ee:	08 95       	ret
  f0:	11 98       	cbi	0x02, 1	; 2
  f2:	08 95       	ret
  f4:	63 30       	cpi	r22, 0x03	; 3
  f6:	31 f4       	brne	.+12     	; 0x104 <_ZN14portcontroller13digitalwriteaEhb+0x30>
  f8:	44 23       	and	r20, r20
  fa:	11 f0       	breq	.+4      	; 0x100 <_ZN14portcontroller13digitalwriteaEhb+0x2c>
  fc:	12 9a       	sbi	0x02, 2	; 2
  fe:	08 95       	ret
 100:	12 98       	cbi	0x02, 2	; 2
 102:	08 95       	ret
 104:	64 30       	cpi	r22, 0x04	; 4
 106:	31 f4       	brne	.+12     	; 0x114 <_ZN14portcontroller13digitalwriteaEhb+0x40>
 108:	44 23       	and	r20, r20
 10a:	11 f0       	breq	.+4      	; 0x110 <_ZN14portcontroller13digitalwriteaEhb+0x3c>
 10c:	13 9a       	sbi	0x02, 3	; 2
 10e:	08 95       	ret
 110:	13 98       	cbi	0x02, 3	; 2
 112:	08 95       	ret
 114:	65 30       	cpi	r22, 0x05	; 5
 116:	31 f4       	brne	.+12     	; 0x124 <_ZN14portcontroller13digitalwriteaEhb+0x50>
 118:	44 23       	and	r20, r20
 11a:	11 f0       	breq	.+4      	; 0x120 <_ZN14portcontroller13digitalwriteaEhb+0x4c>
 11c:	14 9a       	sbi	0x02, 4	; 2
 11e:	08 95       	ret
 120:	14 98       	cbi	0x02, 4	; 2
 122:	08 95       	ret
 124:	66 30       	cpi	r22, 0x06	; 6
 126:	31 f4       	brne	.+12     	; 0x134 <_ZN14portcontroller13digitalwriteaEhb+0x60>
 128:	44 23       	and	r20, r20
 12a:	11 f0       	breq	.+4      	; 0x130 <_ZN14portcontroller13digitalwriteaEhb+0x5c>
 12c:	15 9a       	sbi	0x02, 5	; 2
 12e:	08 95       	ret
 130:	15 98       	cbi	0x02, 5	; 2
 132:	08 95       	ret
 134:	67 30       	cpi	r22, 0x07	; 7
 136:	31 f4       	brne	.+12     	; 0x144 <_ZN14portcontroller13digitalwriteaEhb+0x70>
 138:	44 23       	and	r20, r20
 13a:	11 f0       	breq	.+4      	; 0x140 <_ZN14portcontroller13digitalwriteaEhb+0x6c>
 13c:	16 9a       	sbi	0x02, 6	; 2
 13e:	08 95       	ret
 140:	16 98       	cbi	0x02, 6	; 2
 142:	08 95       	ret
 144:	68 30       	cpi	r22, 0x08	; 8
 146:	29 f4       	brne	.+10     	; 0x152 <_ZN14portcontroller13digitalwriteaEhb+0x7e>
 148:	44 23       	and	r20, r20
 14a:	11 f0       	breq	.+4      	; 0x150 <_ZN14portcontroller13digitalwriteaEhb+0x7c>
 14c:	17 9a       	sbi	0x02, 7	; 2
 14e:	08 95       	ret
 150:	17 98       	cbi	0x02, 7	; 2
 152:	08 95       	ret

00000154 <_ZN14portcontroller12digitalwriteEhb>:
 154:	9c 01       	movw	r18, r24
 156:	9f ef       	ldi	r25, 0xFF	; 255
 158:	96 0f       	add	r25, r22
 15a:	98 30       	cpi	r25, 0x08	; 8
 15c:	28 f4       	brcc	.+10     	; 0x168 <_ZN14portcontroller12digitalwriteEhb+0x14>
 15e:	69 2f       	mov	r22, r25
 160:	c9 01       	movw	r24, r18
 162:	0e 94 6a 00 	call	0xd4	; 0xd4 <_ZN14portcontroller13digitalwriteaEhb>
 166:	08 95       	ret
 168:	82 ef       	ldi	r24, 0xF2	; 242
 16a:	86 0f       	add	r24, r22
 16c:	88 30       	cpi	r24, 0x08	; 8
 16e:	28 f4       	brcc	.+10     	; 0x17a <_ZN14portcontroller12digitalwriteEhb+0x26>
 170:	6d 50       	subi	r22, 0x0D	; 13
 172:	c9 01       	movw	r24, r18
 174:	0e 94 6a 00 	call	0xd4	; 0xd4 <_ZN14portcontroller13digitalwriteaEhb>
 178:	08 95       	ret
 17a:	8a ee       	ldi	r24, 0xEA	; 234
 17c:	86 0f       	add	r24, r22
 17e:	88 30       	cpi	r24, 0x08	; 8
 180:	28 f4       	brcc	.+10     	; 0x18c <_ZN14portcontroller12digitalwriteEhb+0x38>
 182:	65 51       	subi	r22, 0x15	; 21
 184:	c9 01       	movw	r24, r18
 186:	0e 94 6a 00 	call	0xd4	; 0xd4 <_ZN14portcontroller13digitalwriteaEhb>
 18a:	08 95       	ret
 18c:	8f ed       	ldi	r24, 0xDF	; 223
 18e:	86 0f       	add	r24, r22
 190:	88 30       	cpi	r24, 0x08	; 8
 192:	20 f4       	brcc	.+8      	; 0x19c <_ZN14portcontroller12digitalwriteEhb+0x48>
 194:	60 52       	subi	r22, 0x20	; 32
 196:	c9 01       	movw	r24, r18
 198:	0e 94 6a 00 	call	0xd4	; 0xd4 <_ZN14portcontroller13digitalwriteaEhb>
 19c:	08 95       	ret

0000019e <_ZN14portcontrollerD1Ev>:
	}

}

// default destructor
portcontroller::~portcontroller()
 19e:	08 95       	ret

000001a0 <_ZN8shiftregC1EhhhP14portcontroller>:
	}
	port->digitalwrite(latchclkpin,true);

	port->digitalwrite(latchclkpin,false);

}
 1a0:	0f 93       	push	r16
 1a2:	1f 93       	push	r17
 1a4:	fc 01       	movw	r30, r24
 1a6:	60 83       	st	Z, r22
 1a8:	41 83       	std	Z+1, r20	; 0x01
 1aa:	22 83       	std	Z+2, r18	; 0x02
 1ac:	14 87       	std	Z+12, r17	; 0x0c
 1ae:	03 87       	std	Z+11, r16	; 0x0b
 1b0:	13 82       	std	Z+3, r1	; 0x03
 1b2:	14 82       	std	Z+4, r1	; 0x04
 1b4:	15 82       	std	Z+5, r1	; 0x05
 1b6:	16 82       	std	Z+6, r1	; 0x06
 1b8:	17 82       	std	Z+7, r1	; 0x07
 1ba:	10 86       	std	Z+8, r1	; 0x08
 1bc:	11 86       	std	Z+9, r1	; 0x09
 1be:	12 86       	std	Z+10, r1	; 0x0a
 1c0:	1f 91       	pop	r17
 1c2:	0f 91       	pop	r16
 1c4:	08 95       	ret

000001c6 <_ZN8shiftreg9shiftout8Eh>:
 1c6:	ef 92       	push	r14
 1c8:	ff 92       	push	r15
 1ca:	0f 93       	push	r16
 1cc:	1f 93       	push	r17
 1ce:	cf 93       	push	r28
 1d0:	df 93       	push	r29
 1d2:	ec 01       	movw	r28, r24
 1d4:	07 e0       	ldi	r16, 0x07	; 7
 1d6:	10 e0       	ldi	r17, 0x00	; 0
 1d8:	e6 2e       	mov	r14, r22
 1da:	f1 2c       	mov	r15, r1
 1dc:	c7 01       	movw	r24, r14
 1de:	00 2e       	mov	r0, r16
 1e0:	02 c0       	rjmp	.+4      	; 0x1e6 <_ZN8shiftreg9shiftout8Eh+0x20>
 1e2:	95 95       	asr	r25
 1e4:	87 95       	ror	r24
 1e6:	0a 94       	dec	r0
 1e8:	e2 f7       	brpl	.-8      	; 0x1e2 <_ZN8shiftreg9shiftout8Eh+0x1c>
 1ea:	01 97       	sbiw	r24, 0x01	; 1
 1ec:	39 f4       	brne	.+14     	; 0x1fc <_ZN8shiftreg9shiftout8Eh+0x36>
 1ee:	41 e0       	ldi	r20, 0x01	; 1
 1f0:	68 81       	ld	r22, Y
 1f2:	8b 85       	ldd	r24, Y+11	; 0x0b
 1f4:	9c 85       	ldd	r25, Y+12	; 0x0c
 1f6:	0e 94 aa 00 	call	0x154	; 0x154 <_ZN14portcontroller12digitalwriteEhb>
 1fa:	06 c0       	rjmp	.+12     	; 0x208 <_ZN8shiftreg9shiftout8Eh+0x42>
 1fc:	40 e0       	ldi	r20, 0x00	; 0
 1fe:	68 81       	ld	r22, Y
 200:	8b 85       	ldd	r24, Y+11	; 0x0b
 202:	9c 85       	ldd	r25, Y+12	; 0x0c
 204:	0e 94 aa 00 	call	0x154	; 0x154 <_ZN14portcontroller12digitalwriteEhb>
 208:	41 e0       	ldi	r20, 0x01	; 1
 20a:	69 81       	ldd	r22, Y+1	; 0x01
 20c:	8b 85       	ldd	r24, Y+11	; 0x0b
 20e:	9c 85       	ldd	r25, Y+12	; 0x0c
 210:	0e 94 aa 00 	call	0x154	; 0x154 <_ZN14portcontroller12digitalwriteEhb>
 214:	40 e0       	ldi	r20, 0x00	; 0
 216:	69 81       	ldd	r22, Y+1	; 0x01
 218:	8b 85       	ldd	r24, Y+11	; 0x0b
 21a:	9c 85       	ldd	r25, Y+12	; 0x0c
 21c:	0e 94 aa 00 	call	0x154	; 0x154 <_ZN14portcontroller12digitalwriteEhb>
 220:	01 50       	subi	r16, 0x01	; 1
 222:	11 09       	sbc	r17, r1
 224:	d8 f6       	brcc	.-74     	; 0x1dc <_ZN8shiftreg9shiftout8Eh+0x16>
 226:	41 e0       	ldi	r20, 0x01	; 1
 228:	6a 81       	ldd	r22, Y+2	; 0x02
 22a:	8b 85       	ldd	r24, Y+11	; 0x0b
 22c:	9c 85       	ldd	r25, Y+12	; 0x0c
 22e:	0e 94 aa 00 	call	0x154	; 0x154 <_ZN14portcontroller12digitalwriteEhb>
 232:	40 e0       	ldi	r20, 0x00	; 0
 234:	6a 81       	ldd	r22, Y+2	; 0x02
 236:	8b 85       	ldd	r24, Y+11	; 0x0b
 238:	9c 85       	ldd	r25, Y+12	; 0x0c
 23a:	0e 94 aa 00 	call	0x154	; 0x154 <_ZN14portcontroller12digitalwriteEhb>
 23e:	df 91       	pop	r29
 240:	cf 91       	pop	r28
 242:	1f 91       	pop	r17
 244:	0f 91       	pop	r16
 246:	ff 90       	pop	r15
 248:	ef 90       	pop	r14
 24a:	08 95       	ret

0000024c <_ZN8shiftreg10shiftout64Ey>:
void shiftreg::shiftout64(uint64_t data32)
{
 24c:	7f 92       	push	r7
 24e:	8f 92       	push	r8
 250:	9f 92       	push	r9
 252:	af 92       	push	r10
 254:	bf 92       	push	r11
 256:	cf 92       	push	r12
 258:	df 92       	push	r13
 25a:	ef 92       	push	r14
 25c:	ff 92       	push	r15
 25e:	0f 93       	push	r16
 260:	1f 93       	push	r17
 262:	cf 93       	push	r28
 264:	df 93       	push	r29
 266:	ec 01       	movw	r28, r24
 268:	70 2e       	mov	r7, r16
 26a:	82 2e       	mov	r8, r18
 26c:	93 2e       	mov	r9, r19
 26e:	a4 2e       	mov	r10, r20
 270:	b5 2e       	mov	r11, r21
 272:	c6 2e       	mov	r12, r22
 274:	d7 2e       	mov	r13, r23
 276:	68 94       	set
 278:	ee 24       	eor	r14, r14
 27a:	e6 f8       	bld	r14, 6
 27c:	f1 2c       	mov	r15, r1
	
	for (char i =  0; i<64;i++)
	{
		if ((data32>>(64-i))==1)
 27e:	27 2d       	mov	r18, r7
 280:	31 2f       	mov	r19, r17
 282:	48 2d       	mov	r20, r8
 284:	59 2d       	mov	r21, r9
 286:	6a 2d       	mov	r22, r10
 288:	7b 2d       	mov	r23, r11
 28a:	8c 2d       	mov	r24, r12
 28c:	9d 2d       	mov	r25, r13
 28e:	0e 2d       	mov	r16, r14
 290:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <__lshrdi3>
 294:	a1 e0       	ldi	r26, 0x01	; 1
 296:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <__cmpdi2_s8>
 29a:	39 f4       	brne	.+14     	; 0x2aa <_ZN8shiftreg10shiftout64Ey+0x5e>
		{
			
			port->digitalwrite(datapin,true);
 29c:	41 e0       	ldi	r20, 0x01	; 1
 29e:	68 81       	ld	r22, Y
 2a0:	8b 85       	ldd	r24, Y+11	; 0x0b
 2a2:	9c 85       	ldd	r25, Y+12	; 0x0c
 2a4:	0e 94 aa 00 	call	0x154	; 0x154 <_ZN14portcontroller12digitalwriteEhb>
 2a8:	06 c0       	rjmp	.+12     	; 0x2b6 <_ZN8shiftreg10shiftout64Ey+0x6a>
			
		}
		else
		{
			port->digitalwrite(datapin,false);
 2aa:	40 e0       	ldi	r20, 0x00	; 0
 2ac:	68 81       	ld	r22, Y
 2ae:	8b 85       	ldd	r24, Y+11	; 0x0b
 2b0:	9c 85       	ldd	r25, Y+12	; 0x0c
 2b2:	0e 94 aa 00 	call	0x154	; 0x154 <_ZN14portcontroller12digitalwriteEhb>
		}
		port->digitalwrite(clockpin,true);
 2b6:	41 e0       	ldi	r20, 0x01	; 1
 2b8:	69 81       	ldd	r22, Y+1	; 0x01
 2ba:	8b 85       	ldd	r24, Y+11	; 0x0b
 2bc:	9c 85       	ldd	r25, Y+12	; 0x0c
 2be:	0e 94 aa 00 	call	0x154	; 0x154 <_ZN14portcontroller12digitalwriteEhb>
		port->digitalwrite(clockpin,false);
 2c2:	40 e0       	ldi	r20, 0x00	; 0
 2c4:	69 81       	ldd	r22, Y+1	; 0x01
 2c6:	8b 85       	ldd	r24, Y+11	; 0x0b
 2c8:	9c 85       	ldd	r25, Y+12	; 0x0c
 2ca:	0e 94 aa 00 	call	0x154	; 0x154 <_ZN14portcontroller12digitalwriteEhb>
 2ce:	81 e0       	ldi	r24, 0x01	; 1
 2d0:	e8 1a       	sub	r14, r24
 2d2:	f1 08       	sbc	r15, r1

}
void shiftreg::shiftout64(uint64_t data32)
{
	
	for (char i =  0; i<64;i++)
 2d4:	a1 f6       	brne	.-88     	; 0x27e <_ZN8shiftreg10shiftout64Ey+0x32>
		}
		port->digitalwrite(clockpin,true);
		port->digitalwrite(clockpin,false);
		
	}
	port->digitalwrite(latchclkpin,true);
 2d6:	41 e0       	ldi	r20, 0x01	; 1
 2d8:	6a 81       	ldd	r22, Y+2	; 0x02
 2da:	8b 85       	ldd	r24, Y+11	; 0x0b
 2dc:	9c 85       	ldd	r25, Y+12	; 0x0c
 2de:	0e 94 aa 00 	call	0x154	; 0x154 <_ZN14portcontroller12digitalwriteEhb>

	port->digitalwrite(latchclkpin,false);
 2e2:	40 e0       	ldi	r20, 0x00	; 0
 2e4:	6a 81       	ldd	r22, Y+2	; 0x02
 2e6:	8b 85       	ldd	r24, Y+11	; 0x0b
 2e8:	9c 85       	ldd	r25, Y+12	; 0x0c
 2ea:	0e 94 aa 00 	call	0x154	; 0x154 <_ZN14portcontroller12digitalwriteEhb>

}
 2ee:	df 91       	pop	r29
 2f0:	cf 91       	pop	r28
 2f2:	1f 91       	pop	r17
 2f4:	0f 91       	pop	r16
 2f6:	ff 90       	pop	r15
 2f8:	ef 90       	pop	r14
 2fa:	df 90       	pop	r13
 2fc:	cf 90       	pop	r12
 2fe:	bf 90       	pop	r11
 300:	af 90       	pop	r10
 302:	9f 90       	pop	r9
 304:	8f 90       	pop	r8
 306:	7f 90       	pop	r7
 308:	08 95       	ret

0000030a <_ZN8shiftregD1Ev>:
// default destructor
shiftreg::~shiftreg()
 30a:	08 95       	ret

0000030c <_ZN6eepromC1EP14portcontrollerP8shiftregS3_hy>:
// default constructor
eeprom::eeprom()
{
} //eeprom

 eeprom::eeprom(portcontroller* portptr,shiftreg* addrptr,shiftreg* dataregister,uint8_t wepin,uint64_t address2)
 30c:	8f 92       	push	r8
 30e:	9f 92       	push	r9
 310:	af 92       	push	r10
 312:	bf 92       	push	r11
 314:	cf 92       	push	r12
 316:	df 92       	push	r13
 318:	ef 92       	push	r14
 31a:	ff 92       	push	r15
 31c:	0f 93       	push	r16
 31e:	cf 93       	push	r28
 320:	df 93       	push	r29
 322:	cd b7       	in	r28, 0x3d	; 61
 324:	de b7       	in	r29, 0x3e	; 62
 326:	fc 01       	movw	r30, r24
 328:	cb 01       	movw	r24, r22
 32a:	60 2f       	mov	r22, r16
 {
	 	this->portptr=portptr;
 32c:	94 83       	std	Z+4, r25	; 0x04
 32e:	83 83       	std	Z+3, r24	; 0x03
	 	this->addrptr=addrptr;
 330:	56 83       	std	Z+6, r21	; 0x06
 332:	45 83       	std	Z+5, r20	; 0x05
		this->dataptr=dataregister;
 334:	30 87       	std	Z+8, r19	; 0x08
 336:	27 83       	std	Z+7, r18	; 0x07
	 	this->wepin=wepin;
 338:	02 83       	std	Z+2, r16	; 0x02
		this->address= address2;
 33a:	81 86       	std	Z+9, r8	; 0x09
 33c:	92 86       	std	Z+10, r9	; 0x0a
 33e:	a3 86       	std	Z+11, r10	; 0x0b
 340:	b4 86       	std	Z+12, r11	; 0x0c
 342:	c5 86       	std	Z+13, r12	; 0x0d
 344:	d6 86       	std	Z+14, r13	; 0x0e
 346:	e7 86       	std	Z+15, r14	; 0x0f
 348:	f0 8a       	std	Z+16, r15	; 0x10
		this->offset = 0;
 34a:	11 82       	std	Z+1, r1	; 0x01
 34c:	10 82       	st	Z, r1
	 	portptr->digitalwrite(wepin,true);
 34e:	41 e0       	ldi	r20, 0x01	; 1
 350:	0e 94 aa 00 	call	0x154	; 0x154 <_ZN14portcontroller12digitalwriteEhb>

 }
 354:	df 91       	pop	r29
 356:	cf 91       	pop	r28
 358:	0f 91       	pop	r16
 35a:	ff 90       	pop	r15
 35c:	ef 90       	pop	r14
 35e:	df 90       	pop	r13
 360:	cf 90       	pop	r12
 362:	bf 90       	pop	r11
 364:	af 90       	pop	r10
 366:	9f 90       	pop	r9
 368:	8f 90       	pop	r8
 36a:	08 95       	ret

0000036c <_ZN6eepromD1Ev>:

// default destructor
eeprom::~eeprom()
 36c:	08 95       	ret

0000036e <_ZN3romC1EP14portcontrollerP8shiftregy>:
}

uint16_t rom::getaddr()
{
	return address;
}
 36e:	cf 92       	push	r12
 370:	df 92       	push	r13
 372:	ef 92       	push	r14
 374:	ff 92       	push	r15
 376:	0f 93       	push	r16
 378:	1f 93       	push	r17
 37a:	fc 01       	movw	r30, r24
 37c:	71 8b       	std	Z+17, r23	; 0x11
 37e:	60 8b       	std	Z+16, r22	; 0x10
 380:	53 8b       	std	Z+19, r21	; 0x13
 382:	42 8b       	std	Z+18, r20	; 0x12
 384:	c0 86       	std	Z+8, r12	; 0x08
 386:	d1 86       	std	Z+9, r13	; 0x09
 388:	e2 86       	std	Z+10, r14	; 0x0a
 38a:	f3 86       	std	Z+11, r15	; 0x0b
 38c:	04 87       	std	Z+12, r16	; 0x0c
 38e:	15 87       	std	Z+13, r17	; 0x0d
 390:	26 87       	std	Z+14, r18	; 0x0e
 392:	37 87       	std	Z+15, r19	; 0x0f
 394:	10 82       	st	Z, r1
 396:	11 82       	std	Z+1, r1	; 0x01
 398:	12 82       	std	Z+2, r1	; 0x02
 39a:	13 82       	std	Z+3, r1	; 0x03
 39c:	14 82       	std	Z+4, r1	; 0x04
 39e:	15 82       	std	Z+5, r1	; 0x05
 3a0:	16 82       	std	Z+6, r1	; 0x06
 3a2:	17 82       	std	Z+7, r1	; 0x07
 3a4:	1f 91       	pop	r17
 3a6:	0f 91       	pop	r16
 3a8:	ff 90       	pop	r15
 3aa:	ef 90       	pop	r14
 3ac:	df 90       	pop	r13
 3ae:	cf 90       	pop	r12
 3b0:	08 95       	ret

000003b2 <_ZN3romD1Ev>:

// default destructor
rom::~rom()
 3b2:	08 95       	ret

000003b4 <_ZN3ramC1EP14portcontrollerP8shiftregS3_hy>:
		dataptr->shiftout8(data);
	}
	portptr->digitalwrite(wepin,false);
	_delay_ms(1);
	portptr->digitalwrite(wepin,true);
}
 3b4:	8f 92       	push	r8
 3b6:	9f 92       	push	r9
 3b8:	af 92       	push	r10
 3ba:	bf 92       	push	r11
 3bc:	cf 92       	push	r12
 3be:	df 92       	push	r13
 3c0:	ef 92       	push	r14
 3c2:	ff 92       	push	r15
 3c4:	0f 93       	push	r16
 3c6:	cf 93       	push	r28
 3c8:	df 93       	push	r29
 3ca:	cd b7       	in	r28, 0x3d	; 61
 3cc:	de b7       	in	r29, 0x3e	; 62
 3ce:	fc 01       	movw	r30, r24
 3d0:	cb 01       	movw	r24, r22
 3d2:	60 2f       	mov	r22, r16
 3d4:	93 83       	std	Z+3, r25	; 0x03
 3d6:	82 83       	std	Z+2, r24	; 0x02
 3d8:	55 83       	std	Z+5, r21	; 0x05
 3da:	44 83       	std	Z+4, r20	; 0x04
 3dc:	37 83       	std	Z+7, r19	; 0x07
 3de:	26 83       	std	Z+6, r18	; 0x06
 3e0:	01 83       	std	Z+1, r16	; 0x01
 3e2:	80 86       	std	Z+8, r8	; 0x08
 3e4:	91 86       	std	Z+9, r9	; 0x09
 3e6:	a2 86       	std	Z+10, r10	; 0x0a
 3e8:	b3 86       	std	Z+11, r11	; 0x0b
 3ea:	c4 86       	std	Z+12, r12	; 0x0c
 3ec:	d5 86       	std	Z+13, r13	; 0x0d
 3ee:	e6 86       	std	Z+14, r14	; 0x0e
 3f0:	f7 86       	std	Z+15, r15	; 0x0f
 3f2:	10 82       	st	Z, r1
 3f4:	41 e0       	ldi	r20, 0x01	; 1
 3f6:	0e 94 aa 00 	call	0x154	; 0x154 <_ZN14portcontroller12digitalwriteEhb>
 3fa:	df 91       	pop	r29
 3fc:	cf 91       	pop	r28
 3fe:	0f 91       	pop	r16
 400:	ff 90       	pop	r15
 402:	ef 90       	pop	r14
 404:	df 90       	pop	r13
 406:	cf 90       	pop	r12
 408:	bf 90       	pop	r11
 40a:	af 90       	pop	r10
 40c:	9f 90       	pop	r9
 40e:	8f 90       	pop	r8
 410:	08 95       	ret

00000412 <_ZN3ram5writeEyc>:
void ram::write(uint64_t address,char data)
{
 412:	ef 92       	push	r14
 414:	0f 93       	push	r16
 416:	1f 93       	push	r17
 418:	cf 93       	push	r28
 41a:	df 93       	push	r29
 41c:	ec 01       	movw	r28, r24
	addrptr->shiftout64(address);
 41e:	8c 81       	ldd	r24, Y+4	; 0x04
 420:	9d 81       	ldd	r25, Y+5	; 0x05
 422:	0e 94 26 01 	call	0x24c	; 0x24c <_ZN8shiftreg10shiftout64Ey>
	if(dataptr == NULL)
 426:	8e 81       	ldd	r24, Y+6	; 0x06
 428:	9f 81       	ldd	r25, Y+7	; 0x07
 42a:	00 97       	sbiw	r24, 0x00	; 0
 42c:	31 f4       	brne	.+12     	; 0x43a <_ZN3ram5writeEyc+0x28>
	{
		portptr->writeportc(data);
 42e:	6e 2d       	mov	r22, r14
 430:	8a 81       	ldd	r24, Y+2	; 0x02
 432:	9b 81       	ldd	r25, Y+3	; 0x03
 434:	0e 94 64 00 	call	0xc8	; 0xc8 <_ZN14portcontroller10writeportcEc>
 438:	03 c0       	rjmp	.+6      	; 0x440 <_ZN3ram5writeEyc+0x2e>
	}
	else
	{
		dataptr->shiftout8(data);
 43a:	6e 2d       	mov	r22, r14
 43c:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <_ZN8shiftreg9shiftout8Eh>
	}
	portptr->digitalwrite(wepin,false);
 440:	40 e0       	ldi	r20, 0x00	; 0
 442:	69 81       	ldd	r22, Y+1	; 0x01
 444:	8a 81       	ldd	r24, Y+2	; 0x02
 446:	9b 81       	ldd	r25, Y+3	; 0x03
 448:	0e 94 aa 00 	call	0x154	; 0x154 <_ZN14portcontroller12digitalwriteEhb>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 44c:	89 ef       	ldi	r24, 0xF9	; 249
 44e:	90 e0       	ldi	r25, 0x00	; 0
 450:	01 97       	sbiw	r24, 0x01	; 1
 452:	f1 f7       	brne	.-4      	; 0x450 <_ZN3ram5writeEyc+0x3e>
 454:	00 c0       	rjmp	.+0      	; 0x456 <_ZN3ram5writeEyc+0x44>
 456:	00 00       	nop
	_delay_ms(1);
	portptr->digitalwrite(wepin,true);
 458:	41 e0       	ldi	r20, 0x01	; 1
 45a:	69 81       	ldd	r22, Y+1	; 0x01
 45c:	8a 81       	ldd	r24, Y+2	; 0x02
 45e:	9b 81       	ldd	r25, Y+3	; 0x03
 460:	0e 94 aa 00 	call	0x154	; 0x154 <_ZN14portcontroller12digitalwriteEhb>
}
 464:	df 91       	pop	r29
 466:	cf 91       	pop	r28
 468:	1f 91       	pop	r17
 46a:	0f 91       	pop	r16
 46c:	ef 90       	pop	r14
 46e:	08 95       	ret

00000470 <_ZN3ramD1Ev>:
{
	return address;
}
*/
// default destructor
ram::~ram()
 470:	08 95       	ret

00000472 <_ZN4VramC1EP14portcontrollerP8shiftregS3_hy>:


#include "Vram.h"

// default constructor
Vram::Vram(portcontroller* portptr,shiftreg* addrptr,shiftreg* datarptr,uint8_t wepin,uint64_t addressbase):ram( portptr,addrptr,datarptr,wepin, addressbase)
 472:	8f 92       	push	r8
 474:	9f 92       	push	r9
 476:	af 92       	push	r10
 478:	bf 92       	push	r11
 47a:	cf 92       	push	r12
 47c:	df 92       	push	r13
 47e:	ef 92       	push	r14
 480:	ff 92       	push	r15
 482:	0f 93       	push	r16
 484:	cf 93       	push	r28
 486:	df 93       	push	r29
 488:	cd b7       	in	r28, 0x3d	; 61
 48a:	de b7       	in	r29, 0x3e	; 62
 48c:	0e 94 da 01 	call	0x3b4	; 0x3b4 <_ZN3ramC1EP14portcontrollerP8shiftregS3_hy>
{
	
} //Vram
 490:	df 91       	pop	r29
 492:	cf 91       	pop	r28
 494:	0f 91       	pop	r16
 496:	ff 90       	pop	r15
 498:	ef 90       	pop	r14
 49a:	df 90       	pop	r13
 49c:	cf 90       	pop	r12
 49e:	bf 90       	pop	r11
 4a0:	af 90       	pop	r10
 4a2:	9f 90       	pop	r9
 4a4:	8f 90       	pop	r8
 4a6:	08 95       	ret

000004a8 <_ZN4VramD1Ev>:

// default destructor
Vram::~Vram()
 4a8:	0e 94 38 02 	call	0x470	; 0x470 <_ZN3ramD1Ev>
 4ac:	08 95       	ret

000004ae <_Z11storememoryyc>:
{
	
	
}
void storememory(uint64_t address, char out)
{
 4ae:	6f 92       	push	r6
 4b0:	7f 92       	push	r7
 4b2:	8f 92       	push	r8
 4b4:	9f 92       	push	r9
 4b6:	af 92       	push	r10
 4b8:	bf 92       	push	r11
 4ba:	cf 92       	push	r12
 4bc:	df 92       	push	r13
 4be:	ef 92       	push	r14
 4c0:	ff 92       	push	r15
 4c2:	0f 93       	push	r16
 4c4:	1f 93       	push	r17
 4c6:	cf 93       	push	r28
 4c8:	df 93       	push	r29
 4ca:	c2 2e       	mov	r12, r18
 4cc:	d3 2e       	mov	r13, r19
 4ce:	f4 2e       	mov	r15, r20
 4d0:	d5 2f       	mov	r29, r21
 4d2:	c6 2f       	mov	r28, r22
 4d4:	b7 2f       	mov	r27, r23
 4d6:	f8 2f       	mov	r31, r24
 4d8:	e9 2f       	mov	r30, r25
 4da:	e0 2e       	mov	r14, r16
	if (address>=0x0 && address<=0x3fff)
 4dc:	2f 3f       	cpi	r18, 0xFF	; 255
 4de:	0f e3       	ldi	r16, 0x3F	; 63
 4e0:	30 07       	cpc	r19, r16
 4e2:	41 05       	cpc	r20, r1
 4e4:	51 05       	cpc	r21, r1
 4e6:	61 05       	cpc	r22, r1
 4e8:	71 05       	cpc	r23, r1
 4ea:	81 05       	cpc	r24, r1
 4ec:	91 05       	cpc	r25, r1
 4ee:	09 f0       	breq	.+2      	; 0x4f2 <_Z11storememoryyc+0x44>
 4f0:	68 f4       	brcc	.+26     	; 0x50c <_Z11storememoryyc+0x5e>
	{
		bank0.write(address,out);
 4f2:	02 2f       	mov	r16, r18
 4f4:	13 2f       	mov	r17, r19
 4f6:	24 2f       	mov	r18, r20
 4f8:	35 2f       	mov	r19, r21
 4fa:	46 2f       	mov	r20, r22
 4fc:	57 2f       	mov	r21, r23
 4fe:	68 2f       	mov	r22, r24
 500:	79 2f       	mov	r23, r25
 502:	81 e1       	ldi	r24, 0x11	; 17
 504:	92 e0       	ldi	r25, 0x02	; 2
 506:	0e 94 09 02 	call	0x412	; 0x412 <_ZN3ram5writeEyc>
 50a:	9c c0       	rjmp	.+312    	; 0x644 <_Z11storememoryyc+0x196>
	}
	else if (address>=0x4000 && address<=0x7fff)
 50c:	30 54       	subi	r19, 0x40	; 64
 50e:	41 09       	sbc	r20, r1
 510:	51 09       	sbc	r21, r1
 512:	61 09       	sbc	r22, r1
 514:	71 09       	sbc	r23, r1
 516:	81 09       	sbc	r24, r1
 518:	91 09       	sbc	r25, r1
 51a:	13 2f       	mov	r17, r19
 51c:	2f 3f       	cpi	r18, 0xFF	; 255
 51e:	0f e3       	ldi	r16, 0x3F	; 63
 520:	30 07       	cpc	r19, r16
 522:	41 05       	cpc	r20, r1
 524:	51 05       	cpc	r21, r1
 526:	61 05       	cpc	r22, r1
 528:	71 05       	cpc	r23, r1
 52a:	81 05       	cpc	r24, r1
 52c:	91 05       	cpc	r25, r1
 52e:	09 f0       	breq	.+2      	; 0x532 <_Z11storememoryyc+0x84>
 530:	60 f4       	brcc	.+24     	; 0x54a <_Z11storememoryyc+0x9c>
	{
		bank1.write(address-0x4000,out);
 532:	02 2f       	mov	r16, r18
 534:	24 2f       	mov	r18, r20
 536:	35 2f       	mov	r19, r21
 538:	46 2f       	mov	r20, r22
 53a:	57 2f       	mov	r21, r23
 53c:	68 2f       	mov	r22, r24
 53e:	79 2f       	mov	r23, r25
 540:	81 e0       	ldi	r24, 0x01	; 1
 542:	92 e0       	ldi	r25, 0x02	; 2
 544:	0e 94 09 02 	call	0x412	; 0x412 <_ZN3ram5writeEyc>
 548:	7d c0       	rjmp	.+250    	; 0x644 <_Z11storememoryyc+0x196>
	} 
	else if(address>=0x8000 && address<=0xbfff)
 54a:	2c 2d       	mov	r18, r12
 54c:	3d 2d       	mov	r19, r13
 54e:	4f 2d       	mov	r20, r15
 550:	5d 2f       	mov	r21, r29
 552:	6c 2f       	mov	r22, r28
 554:	7b 2f       	mov	r23, r27
 556:	8f 2f       	mov	r24, r31
 558:	9e 2f       	mov	r25, r30
 55a:	30 58       	subi	r19, 0x80	; 128
 55c:	41 09       	sbc	r20, r1
 55e:	51 09       	sbc	r21, r1
 560:	61 09       	sbc	r22, r1
 562:	71 09       	sbc	r23, r1
 564:	81 09       	sbc	r24, r1
 566:	91 09       	sbc	r25, r1
 568:	13 2f       	mov	r17, r19
 56a:	2f 3f       	cpi	r18, 0xFF	; 255
 56c:	0f e3       	ldi	r16, 0x3F	; 63
 56e:	30 07       	cpc	r19, r16
 570:	41 05       	cpc	r20, r1
 572:	51 05       	cpc	r21, r1
 574:	61 05       	cpc	r22, r1
 576:	71 05       	cpc	r23, r1
 578:	81 05       	cpc	r24, r1
 57a:	91 05       	cpc	r25, r1
 57c:	09 f0       	breq	.+2      	; 0x580 <_Z11storememoryyc+0xd2>
 57e:	60 f4       	brcc	.+24     	; 0x598 <_Z11storememoryyc+0xea>
	{
		bank2.write(address-0x8000,out);
 580:	02 2f       	mov	r16, r18
 582:	24 2f       	mov	r18, r20
 584:	35 2f       	mov	r19, r21
 586:	46 2f       	mov	r20, r22
 588:	57 2f       	mov	r21, r23
 58a:	68 2f       	mov	r22, r24
 58c:	79 2f       	mov	r23, r25
 58e:	81 ef       	ldi	r24, 0xF1	; 241
 590:	91 e0       	ldi	r25, 0x01	; 1
 592:	0e 94 09 02 	call	0x412	; 0x412 <_ZN3ram5writeEyc>
 596:	56 c0       	rjmp	.+172    	; 0x644 <_Z11storememoryyc+0x196>
	}
	else if(address>=0xC000 && address<=0xffff)
 598:	2c 2d       	mov	r18, r12
 59a:	3d 2d       	mov	r19, r13
 59c:	4f 2d       	mov	r20, r15
 59e:	5d 2f       	mov	r21, r29
 5a0:	6c 2f       	mov	r22, r28
 5a2:	7b 2f       	mov	r23, r27
 5a4:	8f 2f       	mov	r24, r31
 5a6:	9e 2f       	mov	r25, r30
 5a8:	30 5c       	subi	r19, 0xC0	; 192
 5aa:	41 09       	sbc	r20, r1
 5ac:	51 09       	sbc	r21, r1
 5ae:	61 09       	sbc	r22, r1
 5b0:	71 09       	sbc	r23, r1
 5b2:	81 09       	sbc	r24, r1
 5b4:	91 09       	sbc	r25, r1
 5b6:	13 2f       	mov	r17, r19
 5b8:	2f 3f       	cpi	r18, 0xFF	; 255
 5ba:	0f e3       	ldi	r16, 0x3F	; 63
 5bc:	30 07       	cpc	r19, r16
 5be:	41 05       	cpc	r20, r1
 5c0:	51 05       	cpc	r21, r1
 5c2:	61 05       	cpc	r22, r1
 5c4:	71 05       	cpc	r23, r1
 5c6:	81 05       	cpc	r24, r1
 5c8:	91 05       	cpc	r25, r1
 5ca:	09 f0       	breq	.+2      	; 0x5ce <_Z11storememoryyc+0x120>
 5cc:	60 f4       	brcc	.+24     	; 0x5e6 <_Z11storememoryyc+0x138>
	{
		bank3.write(address-0xC000,out);
 5ce:	02 2f       	mov	r16, r18
 5d0:	24 2f       	mov	r18, r20
 5d2:	35 2f       	mov	r19, r21
 5d4:	46 2f       	mov	r20, r22
 5d6:	57 2f       	mov	r21, r23
 5d8:	68 2f       	mov	r22, r24
 5da:	79 2f       	mov	r23, r25
 5dc:	81 ee       	ldi	r24, 0xE1	; 225
 5de:	91 e0       	ldi	r25, 0x01	; 1
 5e0:	0e 94 09 02 	call	0x412	; 0x412 <_ZN3ram5writeEyc>
 5e4:	2f c0       	rjmp	.+94     	; 0x644 <_Z11storememoryyc+0x196>
	}
	else if(address>=0xffff && address<=0x10000)
 5e6:	2c 2d       	mov	r18, r12
 5e8:	3d 2d       	mov	r19, r13
 5ea:	4f 2d       	mov	r20, r15
 5ec:	5d 2f       	mov	r21, r29
 5ee:	6c 2f       	mov	r22, r28
 5f0:	7b 2f       	mov	r23, r27
 5f2:	8f 2f       	mov	r24, r31
 5f4:	9e 2f       	mov	r25, r30
 5f6:	2f 5f       	subi	r18, 0xFF	; 255
 5f8:	3f 4f       	sbci	r19, 0xFF	; 255
 5fa:	41 09       	sbc	r20, r1
 5fc:	51 09       	sbc	r21, r1
 5fe:	61 09       	sbc	r22, r1
 600:	71 09       	sbc	r23, r1
 602:	81 09       	sbc	r24, r1
 604:	91 09       	sbc	r25, r1
 606:	a1 e0       	ldi	r26, 0x01	; 1
 608:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <__cmpdi2_s8>
 60c:	09 f0       	breq	.+2      	; 0x610 <_Z11storememoryyc+0x162>
 60e:	d0 f4       	brcc	.+52     	; 0x644 <_Z11storememoryyc+0x196>
	{
		bank4.write(address-0x10000,out);
 610:	2c 2d       	mov	r18, r12
 612:	3d 2d       	mov	r19, r13
 614:	4f 2d       	mov	r20, r15
 616:	5d 2f       	mov	r21, r29
 618:	6c 2f       	mov	r22, r28
 61a:	7b 2f       	mov	r23, r27
 61c:	8f 2f       	mov	r24, r31
 61e:	9e 2f       	mov	r25, r30
 620:	41 50       	subi	r20, 0x01	; 1
 622:	51 09       	sbc	r21, r1
 624:	61 09       	sbc	r22, r1
 626:	71 09       	sbc	r23, r1
 628:	81 09       	sbc	r24, r1
 62a:	91 09       	sbc	r25, r1
 62c:	02 2f       	mov	r16, r18
 62e:	13 2f       	mov	r17, r19
 630:	24 2f       	mov	r18, r20
 632:	35 2f       	mov	r19, r21
 634:	46 2f       	mov	r20, r22
 636:	57 2f       	mov	r21, r23
 638:	68 2f       	mov	r22, r24
 63a:	79 2f       	mov	r23, r25
 63c:	81 ed       	ldi	r24, 0xD1	; 209
 63e:	91 e0       	ldi	r25, 0x01	; 1
 640:	0e 94 09 02 	call	0x412	; 0x412 <_ZN3ram5writeEyc>
	}
	
	
}
 644:	df 91       	pop	r29
 646:	cf 91       	pop	r28
 648:	1f 91       	pop	r17
 64a:	0f 91       	pop	r16
 64c:	ff 90       	pop	r15
 64e:	ef 90       	pop	r14
 650:	df 90       	pop	r13
 652:	cf 90       	pop	r12
 654:	bf 90       	pop	r11
 656:	af 90       	pop	r10
 658:	9f 90       	pop	r9
 65a:	8f 90       	pop	r8
 65c:	7f 90       	pop	r7
 65e:	6f 90       	pop	r6
 660:	08 95       	ret

00000662 <main>:
int main(void)
{
	port.writeddra(0xff);
 662:	6f ef       	ldi	r22, 0xFF	; 255
 664:	8b e3       	ldi	r24, 0x3B	; 59
 666:	92 e0       	ldi	r25, 0x02	; 2
 668:	0e 94 66 00 	call	0xcc	; 0xcc <_ZN14portcontroller9writeddraEc>
	port.writeddrc(0xff);
 66c:	6f ef       	ldi	r22, 0xFF	; 255
 66e:	8b e3       	ldi	r24, 0x3B	; 59
 670:	92 e0       	ldi	r25, 0x02	; 2
 672:	0e 94 68 00 	call	0xd0	; 0xd0 <_ZN14portcontroller9writeddrcEc>
	//bank1.setaddress(0);
    /* Replace with your application code */
    while (1) 
    {
		if (PINB>0)
 676:	83 b1       	in	r24, 0x03	; 3
 678:	81 11       	cpse	r24, r1
		{
			if (PINB)
 67a:	83 b1       	in	r24, 0x03	; 3
			{
				
			}
		}
		storememory(0x0000,0xff);
 67c:	0f ef       	ldi	r16, 0xFF	; 255
 67e:	20 e0       	ldi	r18, 0x00	; 0
 680:	30 e0       	ldi	r19, 0x00	; 0
 682:	40 e0       	ldi	r20, 0x00	; 0
 684:	50 e0       	ldi	r21, 0x00	; 0
 686:	60 e0       	ldi	r22, 0x00	; 0
 688:	70 e0       	ldi	r23, 0x00	; 0
 68a:	80 e0       	ldi	r24, 0x00	; 0
 68c:	90 e0       	ldi	r25, 0x00	; 0
 68e:	0e 94 57 02 	call	0x4ae	; 0x4ae <_Z11storememoryyc>
{
	port.writeddra(0xff);
	port.writeddrc(0xff);
	//bank1.setaddress(0);
    /* Replace with your application code */
    while (1) 
 692:	f1 cf       	rjmp	.-30     	; 0x676 <main+0x14>

00000694 <_GLOBAL__sub_I_gpvariables>:
				
			}
		}
		storememory(0x0000,0xff);
	}
 694:	8f 92       	push	r8
 696:	9f 92       	push	r9
 698:	af 92       	push	r10
 69a:	bf 92       	push	r11
 69c:	cf 92       	push	r12
 69e:	df 92       	push	r13
 6a0:	ef 92       	push	r14
 6a2:	ff 92       	push	r15
 6a4:	0f 93       	push	r16
 6a6:	1f 93       	push	r17
 6a8:	cf 93       	push	r28
 6aa:	df 93       	push	r29
 6ac:	cd b7       	in	r28, 0x3d	; 61
 6ae:	de b7       	in	r29, 0x3e	; 62
 6b0:	60 97       	sbiw	r28, 0x10	; 16
 6b2:	0f b6       	in	r0, 0x3f	; 63
 6b4:	f8 94       	cli
 6b6:	de bf       	out	0x3e, r29	; 62
 6b8:	0f be       	out	0x3f, r0	; 63
 6ba:	cd bf       	out	0x3d, r28	; 61
#include "drivers/mem/volatile/Vram.h"
#include "drivers/mem/rom.h"
#include "drivers/mem/eeprom.h"
#include "cpu/interrupts/interrupts.h"

static portcontroller port=portcontroller();
 6bc:	8b e3       	ldi	r24, 0x3B	; 59
 6be:	92 e0       	ldi	r25, 0x02	; 2
 6c0:	0e 94 63 00 	call	0xc6	; 0xc6 <_ZN14portcontrollerC1Ev>
static shiftreg addreg=shiftreg(40,39,38,&port);
 6c4:	0b e3       	ldi	r16, 0x3B	; 59
 6c6:	12 e0       	ldi	r17, 0x02	; 2
 6c8:	26 e2       	ldi	r18, 0x26	; 38
 6ca:	47 e2       	ldi	r20, 0x27	; 39
 6cc:	68 e2       	ldi	r22, 0x28	; 40
 6ce:	8e e2       	ldi	r24, 0x2E	; 46
 6d0:	92 e0       	ldi	r25, 0x02	; 2
 6d2:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <_ZN8shiftregC1EhhhP14portcontroller>
static shiftreg datareg=shiftreg(37,36,35,&port);
 6d6:	23 e2       	ldi	r18, 0x23	; 35
 6d8:	44 e2       	ldi	r20, 0x24	; 36
 6da:	65 e2       	ldi	r22, 0x25	; 37
 6dc:	81 e2       	ldi	r24, 0x21	; 33
 6de:	92 e0       	ldi	r25, 0x02	; 2
 6e0:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <_ZN8shiftregC1EhhhP14portcontroller>
static ram bank0 = ram(&port,&addreg,&datareg,34,0u);	// os ram 
 6e4:	81 2c       	mov	r8, r1
 6e6:	91 2c       	mov	r9, r1
 6e8:	a1 2c       	mov	r10, r1
 6ea:	b1 2c       	mov	r11, r1
 6ec:	c1 2c       	mov	r12, r1
 6ee:	d1 2c       	mov	r13, r1
 6f0:	e1 2c       	mov	r14, r1
 6f2:	f1 2c       	mov	r15, r1
 6f4:	02 e2       	ldi	r16, 0x22	; 34
 6f6:	21 e2       	ldi	r18, 0x21	; 33
 6f8:	32 e0       	ldi	r19, 0x02	; 2
 6fa:	4e e2       	ldi	r20, 0x2E	; 46
 6fc:	52 e0       	ldi	r21, 0x02	; 2
 6fe:	6b e3       	ldi	r22, 0x3B	; 59
 700:	72 e0       	ldi	r23, 0x02	; 2
 702:	81 e1       	ldi	r24, 0x11	; 17
 704:	92 e0       	ldi	r25, 0x02	; 2
 706:	0e 94 da 01 	call	0x3b4	; 0x3b4 <_ZN3ramC1EP14portcontrollerP8shiftregS3_hy>
static ram bank1 = ram(&port,&addreg,&datareg,34,0x4000u);//main prog ram
 70a:	68 94       	set
 70c:	99 24       	eor	r9, r9
 70e:	96 f8       	bld	r9, 6
 710:	21 e2       	ldi	r18, 0x21	; 33
 712:	32 e0       	ldi	r19, 0x02	; 2
 714:	4e e2       	ldi	r20, 0x2E	; 46
 716:	52 e0       	ldi	r21, 0x02	; 2
 718:	6b e3       	ldi	r22, 0x3B	; 59
 71a:	72 e0       	ldi	r23, 0x02	; 2
 71c:	81 e0       	ldi	r24, 0x01	; 1
 71e:	92 e0       	ldi	r25, 0x02	; 2
 720:	0e 94 da 01 	call	0x3b4	; 0x3b4 <_ZN3ramC1EP14portcontrollerP8shiftregS3_hy>
static ram bank2 = ram(&port,&addreg,&datareg,34,0x8000u);// second prog ram or extended main program ram
 724:	68 94       	set
 726:	99 24       	eor	r9, r9
 728:	97 f8       	bld	r9, 7
 72a:	21 e2       	ldi	r18, 0x21	; 33
 72c:	32 e0       	ldi	r19, 0x02	; 2
 72e:	4e e2       	ldi	r20, 0x2E	; 46
 730:	52 e0       	ldi	r21, 0x02	; 2
 732:	6b e3       	ldi	r22, 0x3B	; 59
 734:	72 e0       	ldi	r23, 0x02	; 2
 736:	81 ef       	ldi	r24, 0xF1	; 241
 738:	91 e0       	ldi	r25, 0x01	; 1
 73a:	0e 94 da 01 	call	0x3b4	; 0x3b4 <_ZN3ramC1EP14portcontrollerP8shiftregS3_hy>
static ram bank3 = ram(&port,&addreg,&datareg,34,0xC000);// third program or prog data ram
 73e:	0f 2e       	mov	r0, r31
 740:	f0 ec       	ldi	r31, 0xC0	; 192
 742:	9f 2e       	mov	r9, r31
 744:	f0 2d       	mov	r31, r0
 746:	21 e2       	ldi	r18, 0x21	; 33
 748:	32 e0       	ldi	r19, 0x02	; 2
 74a:	4e e2       	ldi	r20, 0x2E	; 46
 74c:	52 e0       	ldi	r21, 0x02	; 2
 74e:	6b e3       	ldi	r22, 0x3B	; 59
 750:	72 e0       	ldi	r23, 0x02	; 2
 752:	81 ee       	ldi	r24, 0xE1	; 225
 754:	91 e0       	ldi	r25, 0x01	; 1
 756:	0e 94 da 01 	call	0x3b4	; 0x3b4 <_ZN3ramC1EP14portcontrollerP8shiftregS3_hy>
static ram bank4 = Vram(&port,&addreg,&datareg,34,0x10000);// video ram
 75a:	91 2c       	mov	r9, r1
 75c:	aa 24       	eor	r10, r10
 75e:	a3 94       	inc	r10
 760:	21 e2       	ldi	r18, 0x21	; 33
 762:	32 e0       	ldi	r19, 0x02	; 2
 764:	4e e2       	ldi	r20, 0x2E	; 46
 766:	52 e0       	ldi	r21, 0x02	; 2
 768:	6b e3       	ldi	r22, 0x3B	; 59
 76a:	72 e0       	ldi	r23, 0x02	; 2
 76c:	ce 01       	movw	r24, r28
 76e:	01 96       	adiw	r24, 0x01	; 1
 770:	0e 94 39 02 	call	0x472	; 0x472 <_ZN4VramC1EP14portcontrollerP8shiftregS3_hy>
 774:	80 e1       	ldi	r24, 0x10	; 16
 776:	fe 01       	movw	r30, r28
 778:	31 96       	adiw	r30, 0x01	; 1
 77a:	a1 ed       	ldi	r26, 0xD1	; 209
 77c:	b1 e0       	ldi	r27, 0x01	; 1
 77e:	01 90       	ld	r0, Z+
 780:	0d 92       	st	X+, r0
 782:	8a 95       	dec	r24
 784:	e1 f7       	brne	.-8      	; 0x77e <_GLOBAL__sub_I_gpvariables+0xea>
 786:	ce 01       	movw	r24, r28
 788:	01 96       	adiw	r24, 0x01	; 1
 78a:	0e 94 54 02 	call	0x4a8	; 0x4a8 <_ZN4VramD1Ev>

static rom bios = rom(&port,&addreg,0x14000);
 78e:	68 94       	set
 790:	dd 24       	eor	r13, r13
 792:	d6 f8       	bld	r13, 6
 794:	ee 24       	eor	r14, r14
 796:	e3 94       	inc	r14
 798:	00 e0       	ldi	r16, 0x00	; 0
 79a:	10 e0       	ldi	r17, 0x00	; 0
 79c:	20 e0       	ldi	r18, 0x00	; 0
 79e:	30 e0       	ldi	r19, 0x00	; 0
 7a0:	4e e2       	ldi	r20, 0x2E	; 46
 7a2:	52 e0       	ldi	r21, 0x02	; 2
 7a4:	6b e3       	ldi	r22, 0x3B	; 59
 7a6:	72 e0       	ldi	r23, 0x02	; 2
 7a8:	8d eb       	ldi	r24, 0xBD	; 189
 7aa:	91 e0       	ldi	r25, 0x01	; 1
 7ac:	0e 94 b7 01 	call	0x36e	; 0x36e <_ZN3romC1EP14portcontrollerP8shiftregy>
static rom settings = rom(&port,&addreg,0x018000);
 7b0:	68 94       	set
 7b2:	dd 24       	eor	r13, r13
 7b4:	d7 f8       	bld	r13, 7
 7b6:	20 e0       	ldi	r18, 0x00	; 0
 7b8:	30 e0       	ldi	r19, 0x00	; 0
 7ba:	4e e2       	ldi	r20, 0x2E	; 46
 7bc:	52 e0       	ldi	r21, 0x02	; 2
 7be:	6b e3       	ldi	r22, 0x3B	; 59
 7c0:	72 e0       	ldi	r23, 0x02	; 2
 7c2:	89 ea       	ldi	r24, 0xA9	; 169
 7c4:	91 e0       	ldi	r25, 0x01	; 1
 7c6:	0e 94 b7 01 	call	0x36e	; 0x36e <_ZN3romC1EP14portcontrollerP8shiftregy>
static rom program0 = rom(&port,&addreg,0x1C0000);
 7ca:	d1 2c       	mov	r13, r1
 7cc:	0f 2e       	mov	r0, r31
 7ce:	fc e1       	ldi	r31, 0x1C	; 28
 7d0:	ef 2e       	mov	r14, r31
 7d2:	f0 2d       	mov	r31, r0
 7d4:	20 e0       	ldi	r18, 0x00	; 0
 7d6:	30 e0       	ldi	r19, 0x00	; 0
 7d8:	4e e2       	ldi	r20, 0x2E	; 46
 7da:	52 e0       	ldi	r21, 0x02	; 2
 7dc:	6b e3       	ldi	r22, 0x3B	; 59
 7de:	72 e0       	ldi	r23, 0x02	; 2
 7e0:	85 e9       	ldi	r24, 0x95	; 149
 7e2:	91 e0       	ldi	r25, 0x01	; 1
 7e4:	0e 94 b7 01 	call	0x36e	; 0x36e <_ZN3romC1EP14portcontrollerP8shiftregy>
static rom program1 = rom(&port,&addreg,0x020000);
 7e8:	68 94       	set
 7ea:	ee 24       	eor	r14, r14
 7ec:	e1 f8       	bld	r14, 1
 7ee:	20 e0       	ldi	r18, 0x00	; 0
 7f0:	30 e0       	ldi	r19, 0x00	; 0
 7f2:	4e e2       	ldi	r20, 0x2E	; 46
 7f4:	52 e0       	ldi	r21, 0x02	; 2
 7f6:	6b e3       	ldi	r22, 0x3B	; 59
 7f8:	72 e0       	ldi	r23, 0x02	; 2
 7fa:	81 e8       	ldi	r24, 0x81	; 129
 7fc:	91 e0       	ldi	r25, 0x01	; 1
 7fe:	0e 94 b7 01 	call	0x36e	; 0x36e <_ZN3romC1EP14portcontrollerP8shiftregy>
static rom program2 = rom(&port,&addreg,0x024000);
 802:	68 94       	set
 804:	dd 24       	eor	r13, r13
 806:	d6 f8       	bld	r13, 6
 808:	20 e0       	ldi	r18, 0x00	; 0
 80a:	30 e0       	ldi	r19, 0x00	; 0
 80c:	4e e2       	ldi	r20, 0x2E	; 46
 80e:	52 e0       	ldi	r21, 0x02	; 2
 810:	6b e3       	ldi	r22, 0x3B	; 59
 812:	72 e0       	ldi	r23, 0x02	; 2
 814:	8d e6       	ldi	r24, 0x6D	; 109
 816:	91 e0       	ldi	r25, 0x01	; 1
 818:	0e 94 b7 01 	call	0x36e	; 0x36e <_ZN3romC1EP14portcontrollerP8shiftregy>
static rom program3 = rom(&port,&addreg,0x028000);
 81c:	68 94       	set
 81e:	dd 24       	eor	r13, r13
 820:	d7 f8       	bld	r13, 7
 822:	20 e0       	ldi	r18, 0x00	; 0
 824:	30 e0       	ldi	r19, 0x00	; 0
 826:	4e e2       	ldi	r20, 0x2E	; 46
 828:	52 e0       	ldi	r21, 0x02	; 2
 82a:	6b e3       	ldi	r22, 0x3B	; 59
 82c:	72 e0       	ldi	r23, 0x02	; 2
 82e:	89 e5       	ldi	r24, 0x59	; 89
 830:	91 e0       	ldi	r25, 0x01	; 1
 832:	0e 94 b7 01 	call	0x36e	; 0x36e <_ZN3romC1EP14portcontrollerP8shiftregy>

static eeprom fattable =eeprom(&port,&addreg,&datareg,34,0x0002C000);
 836:	0f 2e       	mov	r0, r31
 838:	f0 ec       	ldi	r31, 0xC0	; 192
 83a:	9f 2e       	mov	r9, r31
 83c:	f0 2d       	mov	r31, r0
 83e:	68 94       	set
 840:	aa 24       	eor	r10, r10
 842:	a1 f8       	bld	r10, 1
 844:	d1 2c       	mov	r13, r1
 846:	e1 2c       	mov	r14, r1
 848:	02 e2       	ldi	r16, 0x22	; 34
 84a:	21 e2       	ldi	r18, 0x21	; 33
 84c:	32 e0       	ldi	r19, 0x02	; 2
 84e:	4e e2       	ldi	r20, 0x2E	; 46
 850:	52 e0       	ldi	r21, 0x02	; 2
 852:	6b e3       	ldi	r22, 0x3B	; 59
 854:	72 e0       	ldi	r23, 0x02	; 2
 856:	88 e4       	ldi	r24, 0x48	; 72
 858:	91 e0       	ldi	r25, 0x01	; 1
 85a:	0e 94 86 01 	call	0x30c	; 0x30c <_ZN6eepromC1EP14portcontrollerP8shiftregS3_hy>
static eeprom storage0 =eeprom(&port,&addreg,&datareg,34,0x00030000);
 85e:	91 2c       	mov	r9, r1
 860:	0f 2e       	mov	r0, r31
 862:	f3 e0       	ldi	r31, 0x03	; 3
 864:	af 2e       	mov	r10, r31
 866:	f0 2d       	mov	r31, r0
 868:	21 e2       	ldi	r18, 0x21	; 33
 86a:	32 e0       	ldi	r19, 0x02	; 2
 86c:	4e e2       	ldi	r20, 0x2E	; 46
 86e:	52 e0       	ldi	r21, 0x02	; 2
 870:	6b e3       	ldi	r22, 0x3B	; 59
 872:	72 e0       	ldi	r23, 0x02	; 2
 874:	87 e3       	ldi	r24, 0x37	; 55
 876:	91 e0       	ldi	r25, 0x01	; 1
 878:	0e 94 86 01 	call	0x30c	; 0x30c <_ZN6eepromC1EP14portcontrollerP8shiftregS3_hy>
static eeprom storage1 =eeprom(&port,&addreg,&datareg,34,0x00034000);
 87c:	68 94       	set
 87e:	99 24       	eor	r9, r9
 880:	96 f8       	bld	r9, 6
 882:	21 e2       	ldi	r18, 0x21	; 33
 884:	32 e0       	ldi	r19, 0x02	; 2
 886:	4e e2       	ldi	r20, 0x2E	; 46
 888:	52 e0       	ldi	r21, 0x02	; 2
 88a:	6b e3       	ldi	r22, 0x3B	; 59
 88c:	72 e0       	ldi	r23, 0x02	; 2
 88e:	86 e2       	ldi	r24, 0x26	; 38
 890:	91 e0       	ldi	r25, 0x01	; 1
 892:	0e 94 86 01 	call	0x30c	; 0x30c <_ZN6eepromC1EP14portcontrollerP8shiftregS3_hy>
static eeprom storage2 =eeprom(&port,&addreg,&datareg,34,0x00038000);
 896:	68 94       	set
 898:	99 24       	eor	r9, r9
 89a:	97 f8       	bld	r9, 7
 89c:	21 e2       	ldi	r18, 0x21	; 33
 89e:	32 e0       	ldi	r19, 0x02	; 2
 8a0:	4e e2       	ldi	r20, 0x2E	; 46
 8a2:	52 e0       	ldi	r21, 0x02	; 2
 8a4:	6b e3       	ldi	r22, 0x3B	; 59
 8a6:	72 e0       	ldi	r23, 0x02	; 2
 8a8:	85 e1       	ldi	r24, 0x15	; 21
 8aa:	91 e0       	ldi	r25, 0x01	; 1
 8ac:	0e 94 86 01 	call	0x30c	; 0x30c <_ZN6eepromC1EP14portcontrollerP8shiftregS3_hy>
static eeprom storage3 =eeprom(&port,&addreg,&datareg,34,0x0003C000);
 8b0:	0f 2e       	mov	r0, r31
 8b2:	f0 ec       	ldi	r31, 0xC0	; 192
 8b4:	9f 2e       	mov	r9, r31
 8b6:	f0 2d       	mov	r31, r0
 8b8:	21 e2       	ldi	r18, 0x21	; 33
 8ba:	32 e0       	ldi	r19, 0x02	; 2
 8bc:	4e e2       	ldi	r20, 0x2E	; 46
 8be:	52 e0       	ldi	r21, 0x02	; 2
 8c0:	6b e3       	ldi	r22, 0x3B	; 59
 8c2:	72 e0       	ldi	r23, 0x02	; 2
 8c4:	84 e0       	ldi	r24, 0x04	; 4
 8c6:	91 e0       	ldi	r25, 0x01	; 1
 8c8:	0e 94 86 01 	call	0x30c	; 0x30c <_ZN6eepromC1EP14portcontrollerP8shiftregS3_hy>


static interrupts irqhandler= interrupts();
 8cc:	82 e0       	ldi	r24, 0x02	; 2
 8ce:	91 e0       	ldi	r25, 0x01	; 1
 8d0:	0e 94 5f 00 	call	0xbe	; 0xbe <_ZN10interruptsC1Ev>


static lcd disp1=lcd();
 8d4:	80 e0       	ldi	r24, 0x00	; 0
 8d6:	91 e0       	ldi	r25, 0x01	; 1
 8d8:	0e 94 61 00 	call	0xc2	; 0xc2 <_ZN3lcdC1Ev>
				
			}
		}
		storememory(0x0000,0xff);
	}
 8dc:	60 96       	adiw	r28, 0x10	; 16
 8de:	0f b6       	in	r0, 0x3f	; 63
 8e0:	f8 94       	cli
 8e2:	de bf       	out	0x3e, r29	; 62
 8e4:	0f be       	out	0x3f, r0	; 63
 8e6:	cd bf       	out	0x3d, r28	; 61
 8e8:	df 91       	pop	r29
 8ea:	cf 91       	pop	r28
 8ec:	1f 91       	pop	r17
 8ee:	0f 91       	pop	r16
 8f0:	ff 90       	pop	r15
 8f2:	ef 90       	pop	r14
 8f4:	df 90       	pop	r13
 8f6:	cf 90       	pop	r12
 8f8:	bf 90       	pop	r11
 8fa:	af 90       	pop	r10
 8fc:	9f 90       	pop	r9
 8fe:	8f 90       	pop	r8
 900:	08 95       	ret

00000902 <_GLOBAL__sub_D_gpvariables>:


static interrupts irqhandler= interrupts();


static lcd disp1=lcd();
 902:	80 e0       	ldi	r24, 0x00	; 0
 904:	91 e0       	ldi	r25, 0x01	; 1
 906:	0e 94 62 00 	call	0xc4	; 0xc4 <_ZN3lcdD1Ev>
static eeprom storage1 =eeprom(&port,&addreg,&datareg,34,0x00034000);
static eeprom storage2 =eeprom(&port,&addreg,&datareg,34,0x00038000);
static eeprom storage3 =eeprom(&port,&addreg,&datareg,34,0x0003C000);


static interrupts irqhandler= interrupts();
 90a:	82 e0       	ldi	r24, 0x02	; 2
 90c:	91 e0       	ldi	r25, 0x01	; 1
 90e:	0e 94 60 00 	call	0xc0	; 0xc0 <_ZN10interruptsD1Ev>

static eeprom fattable =eeprom(&port,&addreg,&datareg,34,0x0002C000);
static eeprom storage0 =eeprom(&port,&addreg,&datareg,34,0x00030000);
static eeprom storage1 =eeprom(&port,&addreg,&datareg,34,0x00034000);
static eeprom storage2 =eeprom(&port,&addreg,&datareg,34,0x00038000);
static eeprom storage3 =eeprom(&port,&addreg,&datareg,34,0x0003C000);
 912:	84 e0       	ldi	r24, 0x04	; 4
 914:	91 e0       	ldi	r25, 0x01	; 1
 916:	0e 94 b6 01 	call	0x36c	; 0x36c <_ZN6eepromD1Ev>
static rom program3 = rom(&port,&addreg,0x028000);

static eeprom fattable =eeprom(&port,&addreg,&datareg,34,0x0002C000);
static eeprom storage0 =eeprom(&port,&addreg,&datareg,34,0x00030000);
static eeprom storage1 =eeprom(&port,&addreg,&datareg,34,0x00034000);
static eeprom storage2 =eeprom(&port,&addreg,&datareg,34,0x00038000);
 91a:	85 e1       	ldi	r24, 0x15	; 21
 91c:	91 e0       	ldi	r25, 0x01	; 1
 91e:	0e 94 b6 01 	call	0x36c	; 0x36c <_ZN6eepromD1Ev>
static rom program2 = rom(&port,&addreg,0x024000);
static rom program3 = rom(&port,&addreg,0x028000);

static eeprom fattable =eeprom(&port,&addreg,&datareg,34,0x0002C000);
static eeprom storage0 =eeprom(&port,&addreg,&datareg,34,0x00030000);
static eeprom storage1 =eeprom(&port,&addreg,&datareg,34,0x00034000);
 922:	86 e2       	ldi	r24, 0x26	; 38
 924:	91 e0       	ldi	r25, 0x01	; 1
 926:	0e 94 b6 01 	call	0x36c	; 0x36c <_ZN6eepromD1Ev>
static rom program1 = rom(&port,&addreg,0x020000);
static rom program2 = rom(&port,&addreg,0x024000);
static rom program3 = rom(&port,&addreg,0x028000);

static eeprom fattable =eeprom(&port,&addreg,&datareg,34,0x0002C000);
static eeprom storage0 =eeprom(&port,&addreg,&datareg,34,0x00030000);
 92a:	87 e3       	ldi	r24, 0x37	; 55
 92c:	91 e0       	ldi	r25, 0x01	; 1
 92e:	0e 94 b6 01 	call	0x36c	; 0x36c <_ZN6eepromD1Ev>
static rom program0 = rom(&port,&addreg,0x1C0000);
static rom program1 = rom(&port,&addreg,0x020000);
static rom program2 = rom(&port,&addreg,0x024000);
static rom program3 = rom(&port,&addreg,0x028000);

static eeprom fattable =eeprom(&port,&addreg,&datareg,34,0x0002C000);
 932:	88 e4       	ldi	r24, 0x48	; 72
 934:	91 e0       	ldi	r25, 0x01	; 1
 936:	0e 94 b6 01 	call	0x36c	; 0x36c <_ZN6eepromD1Ev>
static rom bios = rom(&port,&addreg,0x14000);
static rom settings = rom(&port,&addreg,0x018000);
static rom program0 = rom(&port,&addreg,0x1C0000);
static rom program1 = rom(&port,&addreg,0x020000);
static rom program2 = rom(&port,&addreg,0x024000);
static rom program3 = rom(&port,&addreg,0x028000);
 93a:	89 e5       	ldi	r24, 0x59	; 89
 93c:	91 e0       	ldi	r25, 0x01	; 1
 93e:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <_ZN3romD1Ev>

static rom bios = rom(&port,&addreg,0x14000);
static rom settings = rom(&port,&addreg,0x018000);
static rom program0 = rom(&port,&addreg,0x1C0000);
static rom program1 = rom(&port,&addreg,0x020000);
static rom program2 = rom(&port,&addreg,0x024000);
 942:	8d e6       	ldi	r24, 0x6D	; 109
 944:	91 e0       	ldi	r25, 0x01	; 1
 946:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <_ZN3romD1Ev>
static ram bank4 = Vram(&port,&addreg,&datareg,34,0x10000);// video ram

static rom bios = rom(&port,&addreg,0x14000);
static rom settings = rom(&port,&addreg,0x018000);
static rom program0 = rom(&port,&addreg,0x1C0000);
static rom program1 = rom(&port,&addreg,0x020000);
 94a:	81 e8       	ldi	r24, 0x81	; 129
 94c:	91 e0       	ldi	r25, 0x01	; 1
 94e:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <_ZN3romD1Ev>
static ram bank3 = ram(&port,&addreg,&datareg,34,0xC000);// third program or prog data ram
static ram bank4 = Vram(&port,&addreg,&datareg,34,0x10000);// video ram

static rom bios = rom(&port,&addreg,0x14000);
static rom settings = rom(&port,&addreg,0x018000);
static rom program0 = rom(&port,&addreg,0x1C0000);
 952:	85 e9       	ldi	r24, 0x95	; 149
 954:	91 e0       	ldi	r25, 0x01	; 1
 956:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <_ZN3romD1Ev>
static ram bank2 = ram(&port,&addreg,&datareg,34,0x8000u);// second prog ram or extended main program ram
static ram bank3 = ram(&port,&addreg,&datareg,34,0xC000);// third program or prog data ram
static ram bank4 = Vram(&port,&addreg,&datareg,34,0x10000);// video ram

static rom bios = rom(&port,&addreg,0x14000);
static rom settings = rom(&port,&addreg,0x018000);
 95a:	89 ea       	ldi	r24, 0xA9	; 169
 95c:	91 e0       	ldi	r25, 0x01	; 1
 95e:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <_ZN3romD1Ev>
static ram bank1 = ram(&port,&addreg,&datareg,34,0x4000u);//main prog ram
static ram bank2 = ram(&port,&addreg,&datareg,34,0x8000u);// second prog ram or extended main program ram
static ram bank3 = ram(&port,&addreg,&datareg,34,0xC000);// third program or prog data ram
static ram bank4 = Vram(&port,&addreg,&datareg,34,0x10000);// video ram

static rom bios = rom(&port,&addreg,0x14000);
 962:	8d eb       	ldi	r24, 0xBD	; 189
 964:	91 e0       	ldi	r25, 0x01	; 1
 966:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <_ZN3romD1Ev>
static shiftreg datareg=shiftreg(37,36,35,&port);
static ram bank0 = ram(&port,&addreg,&datareg,34,0u);	// os ram 
static ram bank1 = ram(&port,&addreg,&datareg,34,0x4000u);//main prog ram
static ram bank2 = ram(&port,&addreg,&datareg,34,0x8000u);// second prog ram or extended main program ram
static ram bank3 = ram(&port,&addreg,&datareg,34,0xC000);// third program or prog data ram
static ram bank4 = Vram(&port,&addreg,&datareg,34,0x10000);// video ram
 96a:	81 ed       	ldi	r24, 0xD1	; 209
 96c:	91 e0       	ldi	r25, 0x01	; 1
 96e:	0e 94 38 02 	call	0x470	; 0x470 <_ZN3ramD1Ev>
static shiftreg addreg=shiftreg(40,39,38,&port);
static shiftreg datareg=shiftreg(37,36,35,&port);
static ram bank0 = ram(&port,&addreg,&datareg,34,0u);	// os ram 
static ram bank1 = ram(&port,&addreg,&datareg,34,0x4000u);//main prog ram
static ram bank2 = ram(&port,&addreg,&datareg,34,0x8000u);// second prog ram or extended main program ram
static ram bank3 = ram(&port,&addreg,&datareg,34,0xC000);// third program or prog data ram
 972:	81 ee       	ldi	r24, 0xE1	; 225
 974:	91 e0       	ldi	r25, 0x01	; 1
 976:	0e 94 38 02 	call	0x470	; 0x470 <_ZN3ramD1Ev>
static portcontroller port=portcontroller();
static shiftreg addreg=shiftreg(40,39,38,&port);
static shiftreg datareg=shiftreg(37,36,35,&port);
static ram bank0 = ram(&port,&addreg,&datareg,34,0u);	// os ram 
static ram bank1 = ram(&port,&addreg,&datareg,34,0x4000u);//main prog ram
static ram bank2 = ram(&port,&addreg,&datareg,34,0x8000u);// second prog ram or extended main program ram
 97a:	81 ef       	ldi	r24, 0xF1	; 241
 97c:	91 e0       	ldi	r25, 0x01	; 1
 97e:	0e 94 38 02 	call	0x470	; 0x470 <_ZN3ramD1Ev>

static portcontroller port=portcontroller();
static shiftreg addreg=shiftreg(40,39,38,&port);
static shiftreg datareg=shiftreg(37,36,35,&port);
static ram bank0 = ram(&port,&addreg,&datareg,34,0u);	// os ram 
static ram bank1 = ram(&port,&addreg,&datareg,34,0x4000u);//main prog ram
 982:	81 e0       	ldi	r24, 0x01	; 1
 984:	92 e0       	ldi	r25, 0x02	; 2
 986:	0e 94 38 02 	call	0x470	; 0x470 <_ZN3ramD1Ev>
#include "cpu/interrupts/interrupts.h"

static portcontroller port=portcontroller();
static shiftreg addreg=shiftreg(40,39,38,&port);
static shiftreg datareg=shiftreg(37,36,35,&port);
static ram bank0 = ram(&port,&addreg,&datareg,34,0u);	// os ram 
 98a:	81 e1       	ldi	r24, 0x11	; 17
 98c:	92 e0       	ldi	r25, 0x02	; 2
 98e:	0e 94 38 02 	call	0x470	; 0x470 <_ZN3ramD1Ev>
#include "drivers/mem/eeprom.h"
#include "cpu/interrupts/interrupts.h"

static portcontroller port=portcontroller();
static shiftreg addreg=shiftreg(40,39,38,&port);
static shiftreg datareg=shiftreg(37,36,35,&port);
 992:	81 e2       	ldi	r24, 0x21	; 33
 994:	92 e0       	ldi	r25, 0x02	; 2
 996:	0e 94 85 01 	call	0x30a	; 0x30a <_ZN8shiftregD1Ev>
#include "drivers/mem/rom.h"
#include "drivers/mem/eeprom.h"
#include "cpu/interrupts/interrupts.h"

static portcontroller port=portcontroller();
static shiftreg addreg=shiftreg(40,39,38,&port);
 99a:	8e e2       	ldi	r24, 0x2E	; 46
 99c:	92 e0       	ldi	r25, 0x02	; 2
 99e:	0e 94 85 01 	call	0x30a	; 0x30a <_ZN8shiftregD1Ev>
#include "drivers/mem/volatile/Vram.h"
#include "drivers/mem/rom.h"
#include "drivers/mem/eeprom.h"
#include "cpu/interrupts/interrupts.h"

static portcontroller port=portcontroller();
 9a2:	8b e3       	ldi	r24, 0x3B	; 59
 9a4:	92 e0       	ldi	r25, 0x02	; 2
 9a6:	0e 94 cf 00 	call	0x19e	; 0x19e <_ZN14portcontrollerD1Ev>
 9aa:	08 95       	ret

000009ac <__ashrdi3>:
 9ac:	97 fb       	bst	r25, 7
 9ae:	10 f8       	bld	r1, 0

000009b0 <__lshrdi3>:
 9b0:	16 94       	lsr	r1
 9b2:	00 08       	sbc	r0, r0
 9b4:	0f 93       	push	r16
 9b6:	08 30       	cpi	r16, 0x08	; 8
 9b8:	98 f0       	brcs	.+38     	; 0x9e0 <__lshrdi3+0x30>
 9ba:	08 50       	subi	r16, 0x08	; 8
 9bc:	23 2f       	mov	r18, r19
 9be:	34 2f       	mov	r19, r20
 9c0:	45 2f       	mov	r20, r21
 9c2:	56 2f       	mov	r21, r22
 9c4:	67 2f       	mov	r22, r23
 9c6:	78 2f       	mov	r23, r24
 9c8:	89 2f       	mov	r24, r25
 9ca:	90 2d       	mov	r25, r0
 9cc:	f4 cf       	rjmp	.-24     	; 0x9b6 <__lshrdi3+0x6>
 9ce:	05 94       	asr	r0
 9d0:	97 95       	ror	r25
 9d2:	87 95       	ror	r24
 9d4:	77 95       	ror	r23
 9d6:	67 95       	ror	r22
 9d8:	57 95       	ror	r21
 9da:	47 95       	ror	r20
 9dc:	37 95       	ror	r19
 9de:	27 95       	ror	r18
 9e0:	0a 95       	dec	r16
 9e2:	aa f7       	brpl	.-22     	; 0x9ce <__lshrdi3+0x1e>
 9e4:	0f 91       	pop	r16
 9e6:	08 95       	ret

000009e8 <__cmpdi2_s8>:
 9e8:	00 24       	eor	r0, r0
 9ea:	a7 fd       	sbrc	r26, 7
 9ec:	00 94       	com	r0
 9ee:	2a 17       	cp	r18, r26
 9f0:	30 05       	cpc	r19, r0
 9f2:	40 05       	cpc	r20, r0
 9f4:	50 05       	cpc	r21, r0
 9f6:	60 05       	cpc	r22, r0
 9f8:	70 05       	cpc	r23, r0
 9fa:	80 05       	cpc	r24, r0
 9fc:	90 05       	cpc	r25, r0
 9fe:	08 95       	ret

00000a00 <__tablejump2__>:
 a00:	ee 0f       	add	r30, r30
 a02:	ff 1f       	adc	r31, r31
 a04:	05 90       	lpm	r0, Z+
 a06:	f4 91       	lpm	r31, Z
 a08:	e0 2d       	mov	r30, r0
 a0a:	09 94       	ijmp

00000a0c <__do_global_dtors>:
 a0c:	10 e0       	ldi	r17, 0x00	; 0
 a0e:	cf e3       	ldi	r28, 0x3F	; 63
 a10:	d0 e0       	ldi	r29, 0x00	; 0
 a12:	04 c0       	rjmp	.+8      	; 0xa1c <__do_global_dtors+0x10>
 a14:	fe 01       	movw	r30, r28
 a16:	0e 94 00 05 	call	0xa00	; 0xa00 <__tablejump2__>
 a1a:	21 96       	adiw	r28, 0x01	; 1
 a1c:	c0 34       	cpi	r28, 0x40	; 64
 a1e:	d1 07       	cpc	r29, r17
 a20:	c9 f7       	brne	.-14     	; 0xa14 <__do_global_dtors+0x8>
 a22:	f8 94       	cli

00000a24 <__stop_program>:
 a24:	ff cf       	rjmp	.-2      	; 0xa24 <__stop_program>
